syntax = "proto3";

package webview;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/windmilleng/tilt/pkg/webview";

enum LogLevel {
  // For backwards-compatibility, the int value doesn't say
  // anything about relative severity.
  NONE = 0;
  INFO = 1;
  VERBOSE = 2;
  DEBUG = 3;
  WARN = 4;
  ERROR = 5;
}

message LogSegment {
  string span_id = 1;
  google.protobuf.Timestamp time = 2;
  string text = 3;
  LogLevel level = 4;

	// When we store warnings in the LogStore, we break them up into lines and
	// store them as a series of line segments. 'anchor' marks the beginning of a
	// series of logs that should be kept together.
	//
	// Anchor warning1, line1
	//        warning1, line2
	// Anchor warning2, line1
  bool anchor = 5;

  // Context-specific optional fields for a log segment.
  // Used for experimenting with new types of log metadata.
  map<string, string> fields = 6;
}

message LogSpan {
  string manifest_name = 1;
}

message LogList {
  map<string, LogSpan> spans = 1;
  repeated LogSegment segments = 2;

  // from_checkpoint and to_checkpoint express an interval on the
  // central log-store, with an inclusive start and an exclusive end
  //
  // [from_checkpoint, to_checkpoint)
  //
  // An interval of [0, 0) means that the server isn't using
  // the incremental load protocol.
  //
  // An interval of [-1, -1) means that the server doesn't have new logs
  // to send down.
  int32 from_checkpoint = 3;
  int32 to_checkpoint = 4;
}

{
  "swagger": "2.0",
  "info": {
    "title": "pkg/webview/view.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/snapshot/new": {
      "post": {
        "operationId": "UploadSnapshot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webviewUploadSnapshotResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webviewSnapshot"
            }
          }
        ],
        "tags": [
          "ViewService"
        ]
      }
    },
    "/api/view": {
      "get": {
        "operationId": "GetView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webviewView"
            }
          }
        },
        "tags": [
          "ViewService"
        ]
      }
    },
    "/websocket/ack": {
      "post": {
        "operationId": "AckWebsocket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webviewAckWebsocketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webviewAckWebsocketRequest"
            }
          }
        ],
        "tags": [
          "WebsocketService"
        ]
      }
    }
  },
  "definitions": {
    "corev1alpha1TiltBuild": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "A semantic version string.\n+optional"
        },
        "commitSHA": {
          "type": "string",
          "title": "The Git digest of the commit this binary was built at.\n+optional"
        },
        "date": {
          "type": "string",
          "title": "A human-readable string representing when the binary was built.\n+optional"
        },
        "dev": {
          "type": "boolean",
          "format": "boolean",
          "title": "Indicates whether this is a development build (true) or an official release (false).\n+optional"
        }
      },
      "description": "Information about the running tilt binary."
    },
    "corev1alpha1VersionSettings": {
      "type": "object",
      "properties": {
        "checkUpdates": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether version updates have been enabled/disabled from the Tiltfile.\n+optional"
        }
      },
      "description": "Information about how the Tilt binary handles updates."
    },
    "v1FieldsV1": {
      "type": "object",
      "properties": {
        "Raw": {
          "type": "string",
          "format": "byte",
          "description": "Raw is the underlying serialization of this object."
        }
      },
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map\n'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item\n'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list\n'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    },
    "v1ManagedFieldsEntry": {
      "type": "object",
      "properties": {
        "manager": {
          "type": "string",
          "description": "Manager is an identifier of the workflow managing these fields."
        },
        "operation": {
          "type": "string",
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'."
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted."
        },
        "time": {
          "type": "string", "format": "date-time",
          "title": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'\n+optional"
        },
        "fieldsType": {
          "type": "string",
          "title": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1FieldsV1",
          "title": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional"
        }
      },
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to."
    },
    "v1MicroTime": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
        }
      },
      "description": "MicroTime is version of Time with microsecond level precision.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    },
    "v1ObjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
        },
        "selfLink": {
          "type": "string",
          "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional"
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "generation": {
          "type": "string",
          "format": "int64",
          "title": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional"
        },
        "creationTimestamp": {
          "type": "string", "format": "date-time",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "deletionTimestamp": {
          "type": "string", "format": "date-time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "deletionGracePeriodSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
        },
        "ownerReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OwnerReference"
          },
          "title": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge"
        },
        "finalizers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
        },
        "clusterName": {
          "type": "string",
          "title": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional"
        },
        "managedFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManagedFieldsEntry"
          },
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional"
        }
      },
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create."
    },
    "v1OwnerReference": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent."
        },
        "kind": {
          "type": "string",
          "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "name": {
          "type": "string",
          "title": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names"
        },
        "uid": {
          "type": "string",
          "title": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        },
        "controller": {
          "type": "boolean",
          "format": "boolean",
          "title": "If true, this reference points to the managing controller.\n+optional"
        },
        "blockOwnerDeletion": {
          "type": "boolean",
          "format": "boolean",
          "title": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional"
        }
      },
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field."
    },
    "v1Time": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
        }
      },
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    },
    "v1alpha1UIBuildRunning": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string", "format": "date-time",
          "title": "The time when the build started.\n+optional"
        },
        "spanID": {
          "type": "string",
          "title": "The log span where the build logs are stored in the logstore.\n+optional"
        }
      },
      "description": "UIBuildRunning respresents an in-progress build/update in the user interface."
    },
    "v1alpha1UIBuildTerminated": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "title": "A non-empty string if the build failed with an error.\n+optional"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of warnings encountered while running the build.\nThese warnings will also be printed to the build's log.\n+optional"
        },
        "startTime": {
          "type": "string", "format": "date-time",
          "title": "The time when the build started.\n+optional"
        },
        "finishTime": {
          "type": "string", "format": "date-time",
          "title": "The time when the build finished.\n+optional"
        },
        "spanID": {
          "type": "string",
          "title": "The log span where the build logs are stored in the logstore.\n+optional"
        },
        "isCrashRebuild": {
          "type": "boolean",
          "format": "boolean",
          "title": "A crash rebuild happens when Tilt live-updated a container, then\nthe pod crashed, wiping out the live-updates. Tilt does a full\nbuild+deploy to reset the pod state to what's on disk.\n+optional"
        }
      },
      "description": "UIBuildRunning respresents a finished build/update in the user interface."
    },
    "v1alpha1UIButton": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UIButtonSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1UIButtonStatus"
        }
      },
      "title": "UIButton\n+k8s:openapi-gen=true"
    },
    "v1alpha1UIButtonSpec": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1alpha1UIComponentLocation",
          "description": "Location associates the button with another component for layout."
        },
        "text": {
          "type": "string",
          "description": "Text to appear on the button itself or as hover text (depending on button location)."
        },
        "iconName": {
          "type": "string",
          "description": "IconName is a Material Icon to appear next to button text or on the button itself (depending on button location).\n\nValid values are icon font ligature names from the Material Icons set.\nSee https://fonts.google.com/icons for the full list of available icons.\n\nIf both IconSVG and IconName are specified, IconSVG will take precedence.\n\n+optional"
        },
        "iconSVG": {
          "type": "string",
          "description": "IconSVG is an SVG to use as the icon to appear next to button text or on the button itself (depending on button\nlocation).\n\nThis should be an \u003csvg\u003e element scaled for a 24x24 viewport.\n\nIf both IconSVG and IconName are specified, IconSVG will take precedence.\n\n+optional"
        }
      },
      "title": "UIButtonSpec defines the desired state of UIButton"
    },
    "v1alpha1UIButtonStatus": {
      "type": "object",
      "properties": {
        "lastClickedAt": {
          "type": "string", "format": "date-time",
          "description": "LastClickedAt is the timestamp of the last time the button was clicked.\n\nIf the button has never clicked before, this will be the zero-value/null."
        }
      },
      "title": "UIButtonStatus defines the observed state of UIButton"
    },
    "v1alpha1UIComponentLocation": {
      "type": "object",
      "properties": {
        "componentID": {
          "type": "string",
          "description": "ComponentID is the identifier of the parent component to associate this component with.\n\nFor example, this is a resource name if the ComponentType is Resource."
        },
        "componentType": {
          "type": "string",
          "description": "ComponentType is the type of the parent component."
        }
      },
      "description": "UIComponentLocation specifies where to put a UI component."
    },
    "v1alpha1UIFeatureFlag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the flag.\n+optional"
        },
        "value": {
          "type": "boolean",
          "format": "boolean",
          "title": "The value of the flag.\n+optional"
        }
      },
      "description": "Configures Tilt to enable non-default features (e.g., experimental or\ndeprecated).\n\nThe Tilt features controlled by this are generally in an unfinished state,\nand not yet documented.\n\nAs a Tilt user, you don’t need to worry about this unless something\nelse directs you to (e.g., an experimental feature doc, or a conversation\nwith a Tilt contributor)."
    },
    "v1alpha1UIResource": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UIResourceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1UIResourceStatus"
        }
      },
      "description": "UIResource represents per-resource status data for rendering the web UI.\n\nTreat this as a legacy data structure that's more intended to make transition\neasier rather than a robust long-term API.\n\n+k8s:openapi-gen=true"
    },
    "v1alpha1UIResourceKubernetes": {
      "type": "object",
      "properties": {
        "podName": {
          "type": "string",
          "description": "The name of the active pod.\n\nThe active pod tends to be what Tilt defaults to for port-forwards,\nlive-updates, etc.\n+optional"
        },
        "podCreationTime": {
          "type": "string", "format": "date-time",
          "title": "The creation time of the active pod.\n+optional"
        },
        "podUpdateStartTime": {
          "type": "string", "format": "date-time",
          "title": "The last update time of the active pod\n+optional"
        },
        "podStatus": {
          "type": "string",
          "title": "The status of the active pod.\n+optional"
        },
        "podStatusMessage": {
          "type": "string",
          "title": "Extra error messaging around the current status of the active pod.\n+optional"
        },
        "allContainersReady": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether all the containers in the pod are currently healthy\nand have passed readiness checks.\n+optional"
        },
        "podRestarts": {
          "type": "integer",
          "format": "int32",
          "title": "The number of pod restarts.\n+optional"
        },
        "spanID": {
          "type": "string",
          "title": "The span where this pod stores its logs in the Tilt logstore.\n+optional"
        },
        "displayNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of all resources deployed in the Kubernetes deploy\nfor this resource.\n+optional"
        }
      },
      "description": "UIResourceKubernetes contains status information specific to Kubernetes."
    },
    "v1alpha1UIResourceLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "A URL to link to.\n+optional"
        },
        "name": {
          "type": "string",
          "title": "The display label on a URL.\n+optional"
        }
      },
      "description": "UIResourceLink represents a link assocatiated with a UIResource."
    },
    "v1alpha1UIResourceLocal": {
      "type": "object",
      "properties": {
        "pid": {
          "type": "string",
          "format": "int64",
          "title": "The PID of the actively running local command.\n+optional"
        },
        "isTest": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether this represents a test job.\n+optional"
        }
      },
      "description": "UIResourceLocal contains status information specific to local commands."
    },
    "v1alpha1UIResourceSpec": {
      "type": "object",
      "description": "UIResourceSpec is an empty struct.\nUIResource is a kludge for making Tilt's internal status readable, not\nfor specifying behavior."
    },
    "v1alpha1UIResourceStatus": {
      "type": "object",
      "properties": {
        "lastDeployTime": {
          "type": "string", "format": "date-time",
          "title": "The last time this resource was deployed.\n+optional"
        },
        "triggerMode": {
          "type": "integer",
          "format": "int32",
          "title": "Bit mask representing whether this resource is run when:\n1) When a file changes\n2) When the resource initializes\n+optional"
        },
        "buildHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIBuildTerminated"
          },
          "title": "Past completed builds.\n+optional"
        },
        "currentBuild": {
          "$ref": "#/definitions/v1alpha1UIBuildRunning",
          "title": "The currently running build, if any.\n+optional"
        },
        "pendingBuildSince": {
          "type": "string", "format": "date-time",
          "title": "When the build was put in the pending queue.\n+optional"
        },
        "hasPendingChanges": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if the build was put in the pending queue due to file changes.\n+optional"
        },
        "endpointLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIResourceLink"
          },
          "title": "Links attached to this resource.\n+optional"
        },
        "k8sResourceInfo": {
          "$ref": "#/definitions/v1alpha1UIResourceKubernetes",
          "title": "Extra data about Kubernetes resources.\n+optional"
        },
        "localResourceInfo": {
          "$ref": "#/definitions/v1alpha1UIResourceLocal",
          "title": "Extra data about Local resources\n+optional"
        },
        "runtimeStatus": {
          "type": "string",
          "description": "The RuntimeStatus is a simple, high-level summary of the runtime state of a server.\n\nNot all resources run servers.\n+optional"
        },
        "updateStatus": {
          "type": "string",
          "description": "The UpdateStatus is a simple, high-level summary of any update tasks to bring\nthe resource up-to-date.\n\nIf the resource runs a server, this may include both build tasks and live-update\nsyncing.\n+optional"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIResourceTargetSpec"
          },
          "title": "Information about all the target specs that this resource summarizes.\n+optional"
        },
        "queued": {
          "type": "boolean",
          "format": "boolean",
          "title": "Queued is a simple indicator of whether the resource is queued for an update.\n+optional"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "description": "Order expresses the relative order of resources in the UI when they're not\notherwise sorted. Lower integers go first. When two resources have the same\norder, they should be sorted by name.\n\nWhen UIResources are generated from the Tiltfile, we use the order they\nwere added to the Tiltfile for the Order field.\n\n+optional"
        }
      },
      "title": "UIResourceStatus defines the observed state of UIResource"
    },
    "v1alpha1UIResourceTargetSpec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the target.\n+optional"
        },
        "type": {
          "type": "string",
          "title": "The type of the target.\n+optional"
        },
        "hasLiveUpdate": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether the target has a live update assocated with it.\n+optional"
        }
      },
      "description": "UIResourceTargetSpec represents the spec of a build or deploy that a resource summarizes."
    },
    "v1alpha1UISession": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UISessionSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1UISessionStatus"
        }
      },
      "description": "UISession represents global status data for rendering the web UI.\n\nTreat this as a legacy data structure that's more intended to make transition\neasier rather than a robust long-term API.\n\nPer-resource status data should be stored in UIResource.\n\n+k8s:openapi-gen=true"
    },
    "v1alpha1UISessionSpec": {
      "type": "object",
      "description": "UISessionSpec is an empty struct.\nUISession is a kludge for making Tilt's internal status readable, not\nfor specifying behavior."
    },
    "v1alpha1UISessionStatus": {
      "type": "object",
      "properties": {
        "featureFlags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIFeatureFlag"
          },
          "title": "FeatureFlags reports a list of experimental features that have been\nenabled.\n+optional"
        },
        "needsAnalyticsNudge": {
          "type": "boolean",
          "format": "boolean",
          "title": "NeedsAnalyticsNudge reports whether the UI hasn't opted in or out\nof analytics, and the UI should nudge them to do so.\n+optional"
        },
        "runningTiltBuild": {
          "$ref": "#/definitions/corev1alpha1TiltBuild",
          "title": "RunningTiltBuild reports the currently running version of tilt\nthat this UI is talking to.\n+optional"
        },
        "suggestedTiltVersion": {
          "type": "string",
          "title": "SuggestedTiltVersion tells the UI the recommended version for this\nuser. If the version is different than what's running, the UI\nmay display a prompt to upgrade.\n+optional"
        },
        "versionSettings": {
          "$ref": "#/definitions/corev1alpha1VersionSettings",
          "title": "VersionSettings indicates whether version updates have been enabled/disabled\nfrom the Tiltfile.\n+optional"
        },
        "tiltCloudUsername": {
          "type": "string",
          "title": "TiltCloudUsername reports the username if the user is signed into\nTiltCloud.\n+optional"
        },
        "tiltCloudTeamName": {
          "type": "string",
          "title": "TiltCloudUsername reports the human-readable team name if the user is\nsigned into TiltCloud and the Tiltfile declares a team.\n+optional"
        },
        "tiltCloudSchemeHost": {
          "type": "string",
          "title": "TiltCloudSchemeHost reports the base URL of the Tilt Cloud instance\nassociated with this Tilt process. Usually https://cloud.tilt.dev\n+optional"
        },
        "tiltCloudTeamID": {
          "type": "string",
          "title": "TiltCloudTeamID reports the unique team id if the user is signed into\nTiltCloud and the Tiltfile declares a team.\n+optional"
        },
        "fatalError": {
          "type": "string",
          "title": "A FatalError is an error that forces Tilt to stop its control loop.\nThe API server will stay up and continue to serve the UI, but\nno further builds will happen.\n+optional"
        },
        "tiltStartTime": {
          "type": "string", "format": "date-time",
          "title": "The time that this instance of tilt started.\nClients can use this to determine if the API server has restarted\nand all the objects need to be refreshed.\n+optional"
        },
        "tiltfileKey": {
          "type": "string",
          "title": "An identifier for the Tiltfile that is running.\nClients can use this to store data associated with a particular\nproject in LocalStorage or other persistent storage.\n+optional"
        }
      },
      "title": "UISessionStatus defines the observed state of UISession"
    },
    "webviewAckWebsocketRequest": {
      "type": "object",
      "properties": {
        "to_checkpoint": {
          "type": "integer",
          "format": "int32",
          "title": "The to_checkpoint on the received LogList"
        },
        "tilt_start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Allows us to synchronize on a running Tilt intance,\nso we can tell when we're talking to the same Tilt."
        }
      },
      "description": "NOTE(nick): This is obsolete.\n\nOur websocket service has two kinds of messages:\n1) On initialization, we send down the complete view state\n2) On every change, we send down the resources that have\n   changed since the last send()."
    },
    "webviewAckWebsocketResponse": {
      "type": "object"
    },
    "webviewBuildRecord": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "finish_time": {
          "type": "string",
          "format": "date-time"
        },
        "is_crash_rebuild": {
          "type": "boolean",
          "format": "boolean"
        },
        "span_id": {
          "type": "string",
          "description": "The span id for this build record's logs in the main logstore."
        }
      }
    },
    "webviewK8sResourceInfo": {
      "type": "object",
      "properties": {
        "pod_name": {
          "type": "string"
        },
        "pod_creation_time": {
          "type": "string"
        },
        "pod_update_start_time": {
          "type": "string"
        },
        "pod_status": {
          "type": "string"
        },
        "pod_status_message": {
          "type": "string"
        },
        "all_containers_ready": {
          "type": "boolean",
          "format": "boolean"
        },
        "pod_restarts": {
          "type": "integer",
          "format": "int32"
        },
        "span_id": {
          "type": "string",
          "title": "The span id for this pod's logs in the main logstore"
        },
        "display_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "webviewLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "webviewLocalResourceInfo": {
      "type": "object",
      "properties": {
        "pid": {
          "type": "string",
          "format": "int64"
        },
        "is_test": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "webviewLogLevel": {
      "type": "string",
      "enum": [
        "NONE",
        "INFO",
        "VERBOSE",
        "DEBUG",
        "WARN",
        "ERROR"
      ],
      "default": "NONE",
      "description": " - NONE: For backwards-compatibility, the int value doesn't say\nanything about relative severity."
    },
    "webviewLogList": {
      "type": "object",
      "properties": {
        "spans": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/webviewLogSpan"
          }
        },
        "segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webviewLogSegment"
          }
        },
        "from_checkpoint": {
          "type": "integer",
          "format": "int32",
          "description": "[from_checkpoint, to_checkpoint)\n\nAn interval of [0, 0) means that the server isn't using\nthe incremental load protocol.\n\nAn interval of [-1, -1) means that the server doesn't have new logs\nto send down.",
          "title": "from_checkpoint and to_checkpoint express an interval on the\ncentral log-store, with an inclusive start and an exclusive end"
        },
        "to_checkpoint": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "webviewLogSegment": {
      "type": "object",
      "properties": {
        "span_id": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "text": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/webviewLogLevel"
        },
        "anchor": {
          "type": "boolean",
          "format": "boolean",
          "description": "When we store warnings in the LogStore, we break them up into lines and\nstore them as a series of line segments. 'anchor' marks the beginning of a\nseries of logs that should be kept together.\n\nAnchor warning1, line1\n       warning1, line2\nAnchor warning2, line1"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context-specific optional fields for a log segment.\nUsed for experimenting with new types of log metadata."
        }
      }
    },
    "webviewLogSpan": {
      "type": "object",
      "properties": {
        "manifest_name": {
          "type": "string"
        }
      }
    },
    "webviewResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "last_deploy_time": {
          "type": "string",
          "format": "date-time"
        },
        "trigger_mode": {
          "type": "integer",
          "format": "int32"
        },
        "build_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webviewBuildRecord"
          }
        },
        "current_build": {
          "$ref": "#/definitions/webviewBuildRecord"
        },
        "pending_build_since": {
          "type": "string",
          "format": "date-time"
        },
        "has_pending_changes": {
          "type": "boolean",
          "format": "boolean"
        },
        "endpoint_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webviewLink"
          }
        },
        "podID": {
          "type": "string"
        },
        "k8s_resource_info": {
          "$ref": "#/definitions/webviewK8sResourceInfo"
        },
        "local_resource_info": {
          "$ref": "#/definitions/webviewLocalResourceInfo"
        },
        "runtime_status": {
          "type": "string"
        },
        "update_status": {
          "type": "string"
        },
        "is_tiltfile": {
          "type": "boolean",
          "format": "boolean"
        },
        "specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webviewTargetSpec"
          }
        },
        "queued": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "webviewSnapshot": {
      "type": "object",
      "properties": {
        "view": {
          "$ref": "#/definitions/webviewView"
        },
        "is_sidebar_closed": {
          "type": "boolean",
          "format": "boolean"
        },
        "path": {
          "type": "string"
        },
        "snapshot_highlight": {
          "$ref": "#/definitions/webviewSnapshotHighlight"
        },
        "snapshot_link": {
          "type": "string"
        }
      }
    },
    "webviewSnapshotHighlight": {
      "type": "object",
      "properties": {
        "beginning_logID": {
          "type": "string"
        },
        "ending_logID": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "webviewTargetSpec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/webviewTargetType"
        },
        "has_live_update": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "webviewTargetType": {
      "type": "string",
      "enum": [
        "TARGET_TYPE_UNSPECIFIED",
        "TARGET_TYPE_IMAGE",
        "TARGET_TYPE_K8S",
        "TARGET_TYPE_DOCKER_COMPOSE",
        "TARGET_TYPE_LOCAL"
      ],
      "default": "TARGET_TYPE_UNSPECIFIED",
      "title": "Correspond to implementations of the TargetSpec interface"
    },
    "webviewTiltBuild": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commitSHA": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "dev": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "webviewUploadSnapshotResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "webviewVersionSettings": {
      "type": "object",
      "properties": {
        "check_updates": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "webviewView": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webviewResource"
          }
        },
        "DEPRECATED_log_timestamps": {
          "type": "boolean",
          "format": "boolean",
          "description": "We used to have a setting that allowed users to dynamically\nprepend timestamps in logs."
        },
        "feature_flags": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean",
            "format": "boolean"
          }
        },
        "needs_analytics_nudge": {
          "type": "boolean",
          "format": "boolean"
        },
        "running_tilt_build": {
          "$ref": "#/definitions/webviewTiltBuild"
        },
        "DEPRECATED_latest_tilt_build": {
          "$ref": "#/definitions/webviewTiltBuild"
        },
        "suggested_tilt_version": {
          "type": "string"
        },
        "version_settings": {
          "$ref": "#/definitions/webviewVersionSettings"
        },
        "tilt_cloud_username": {
          "type": "string"
        },
        "tilt_cloud_team_name": {
          "type": "string"
        },
        "tilt_cloud_schemeHost": {
          "type": "string"
        },
        "tilt_cloud_teamID": {
          "type": "string"
        },
        "fatal_error": {
          "type": "string"
        },
        "log_list": {
          "$ref": "#/definitions/webviewLogList"
        },
        "tilt_start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Allows us to synchronize on a running Tilt intance,\nso we can tell when Tilt restarted."
        },
        "tiltfile_key": {
          "type": "string",
          "title": "an identifier for the tiltfile that is running, so that the web ui can store data per tiltfile"
        },
        "ui_session": {
          "$ref": "#/definitions/v1alpha1UISession",
          "description": "New API-server based data models."
        },
        "ui_resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIResource"
          }
        },
        "ui_buttons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UIButton"
          }
        },
        "is_complete": {
          "type": "boolean",
          "format": "boolean",
          "description": "indicates that this view is a complete representation of the app\nif false, this view just contains deltas from a previous view."
        }
      },
      "description": "1) On initialization, we send down the complete view state\n   (TiltStartTime, UISession, UIResources, and LogList)\n\n2) On every change, we send down the resources that have\n   changed since the last send().\n   (new logs and any updated UISession/UIResource objects).\n\nAll other fields are obsolete, but are needed for deserializing\nold snapshots.",
      "title": "Our websocket service has two kinds of View messages:"
    }
  }
}

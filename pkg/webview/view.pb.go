// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.15.7
// source: pkg/webview/view.proto

package webview

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	v1alpha1 "github.com/tilt-dev/tilt/pkg/apis/core/v1alpha1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Correspond to implementations of the TargetSpec interface
type TargetType int32

const (
	TargetType_TARGET_TYPE_UNSPECIFIED    TargetType = 0
	TargetType_TARGET_TYPE_IMAGE          TargetType = 1
	TargetType_TARGET_TYPE_K8S            TargetType = 2
	TargetType_TARGET_TYPE_DOCKER_COMPOSE TargetType = 3
	TargetType_TARGET_TYPE_LOCAL          TargetType = 4
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNSPECIFIED",
		1: "TARGET_TYPE_IMAGE",
		2: "TARGET_TYPE_K8S",
		3: "TARGET_TYPE_DOCKER_COMPOSE",
		4: "TARGET_TYPE_LOCAL",
	}
	TargetType_value = map[string]int32{
		"TARGET_TYPE_UNSPECIFIED":    0,
		"TARGET_TYPE_IMAGE":          1,
		"TARGET_TYPE_K8S":            2,
		"TARGET_TYPE_DOCKER_COMPOSE": 3,
		"TARGET_TYPE_LOCAL":          4,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_webview_view_proto_enumTypes[0].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_pkg_webview_view_proto_enumTypes[0]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{0}
}

type TargetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          TargetType `protobuf:"varint,2,opt,name=type,proto3,enum=webview.TargetType" json:"type,omitempty"`
	HasLiveUpdate bool       `protobuf:"varint,3,opt,name=has_live_update,json=hasLiveUpdate,proto3" json:"has_live_update,omitempty"`
}

func (x *TargetSpec) Reset() {
	*x = TargetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSpec) ProtoMessage() {}

func (x *TargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSpec.ProtoReflect.Descriptor instead.
func (*TargetSpec) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{0}
}

func (x *TargetSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TargetSpec) GetType() TargetType {
	if x != nil {
		return x.Type
	}
	return TargetType_TARGET_TYPE_UNSPECIFIED
}

func (x *TargetSpec) GetHasLiveUpdate() bool {
	if x != nil {
		return x.HasLiveUpdate
	}
	return false
}

type BuildRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Warnings       []string               `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	IsCrashRebuild bool                   `protobuf:"varint,7,opt,name=is_crash_rebuild,json=isCrashRebuild,proto3" json:"is_crash_rebuild,omitempty"`
	// The span id for this build record's logs in the main logstore.
	SpanId string `protobuf:"bytes,8,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *BuildRecord) Reset() {
	*x = BuildRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRecord) ProtoMessage() {}

func (x *BuildRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRecord.ProtoReflect.Descriptor instead.
func (*BuildRecord) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{1}
}

func (x *BuildRecord) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *BuildRecord) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *BuildRecord) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BuildRecord) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *BuildRecord) GetIsCrashRebuild() bool {
	if x != nil {
		return x.IsCrashRebuild
	}
	return false
}

func (x *BuildRecord) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type K8SResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName            string `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodCreationTime    string `protobuf:"bytes,2,opt,name=pod_creation_time,json=podCreationTime,proto3" json:"pod_creation_time,omitempty"`
	PodUpdateStartTime string `protobuf:"bytes,3,opt,name=pod_update_start_time,json=podUpdateStartTime,proto3" json:"pod_update_start_time,omitempty"`
	PodStatus          string `protobuf:"bytes,4,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty"`
	PodStatusMessage   string `protobuf:"bytes,5,opt,name=pod_status_message,json=podStatusMessage,proto3" json:"pod_status_message,omitempty"`
	AllContainersReady bool   `protobuf:"varint,6,opt,name=all_containers_ready,json=allContainersReady,proto3" json:"all_containers_ready,omitempty"`
	PodRestarts        int32  `protobuf:"varint,7,opt,name=pod_restarts,json=podRestarts,proto3" json:"pod_restarts,omitempty"`
	// The span id for this pod's logs in the main logstore
	SpanId       string   `protobuf:"bytes,9,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	DisplayNames []string `protobuf:"bytes,10,rep,name=display_names,json=displayNames,proto3" json:"display_names,omitempty"`
}

func (x *K8SResourceInfo) Reset() {
	*x = K8SResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SResourceInfo) ProtoMessage() {}

func (x *K8SResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SResourceInfo.ProtoReflect.Descriptor instead.
func (*K8SResourceInfo) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{2}
}

func (x *K8SResourceInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *K8SResourceInfo) GetPodCreationTime() string {
	if x != nil {
		return x.PodCreationTime
	}
	return ""
}

func (x *K8SResourceInfo) GetPodUpdateStartTime() string {
	if x != nil {
		return x.PodUpdateStartTime
	}
	return ""
}

func (x *K8SResourceInfo) GetPodStatus() string {
	if x != nil {
		return x.PodStatus
	}
	return ""
}

func (x *K8SResourceInfo) GetPodStatusMessage() string {
	if x != nil {
		return x.PodStatusMessage
	}
	return ""
}

func (x *K8SResourceInfo) GetAllContainersReady() bool {
	if x != nil {
		return x.AllContainersReady
	}
	return false
}

func (x *K8SResourceInfo) GetPodRestarts() int32 {
	if x != nil {
		return x.PodRestarts
	}
	return 0
}

func (x *K8SResourceInfo) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *K8SResourceInfo) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

type LocalResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	IsTest bool  `protobuf:"varint,2,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
}

func (x *LocalResourceInfo) Reset() {
	*x = LocalResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalResourceInfo) ProtoMessage() {}

func (x *LocalResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalResourceInfo.ProtoReflect.Descriptor instead.
func (*LocalResourceInfo) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{3}
}

func (x *LocalResourceInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *LocalResourceInfo) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{4}
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LastDeployTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_deploy_time,json=lastDeployTime,proto3" json:"last_deploy_time,omitempty"`
	TriggerMode       int32                  `protobuf:"varint,5,opt,name=trigger_mode,json=triggerMode,proto3" json:"trigger_mode,omitempty"`
	BuildHistory      []*BuildRecord         `protobuf:"bytes,6,rep,name=build_history,json=buildHistory,proto3" json:"build_history,omitempty"`
	CurrentBuild      *BuildRecord           `protobuf:"bytes,7,opt,name=current_build,json=currentBuild,proto3" json:"current_build,omitempty"`
	PendingBuildSince *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=pending_build_since,json=pendingBuildSince,proto3" json:"pending_build_since,omitempty"`
	HasPendingChanges bool                   `protobuf:"varint,11,opt,name=has_pending_changes,json=hasPendingChanges,proto3" json:"has_pending_changes,omitempty"`
	EndpointLinks     []*Link                `protobuf:"bytes,28,rep,name=endpoint_links,json=endpointLinks,proto3" json:"endpoint_links,omitempty"`
	PodID             string                 `protobuf:"bytes,13,opt,name=podID,proto3" json:"podID,omitempty"`
	K8SResourceInfo   *K8SResourceInfo       `protobuf:"bytes,14,opt,name=k8s_resource_info,json=k8sResourceInfo,proto3" json:"k8s_resource_info,omitempty"`
	LocalResourceInfo *LocalResourceInfo     `protobuf:"bytes,17,opt,name=local_resource_info,json=localResourceInfo,proto3" json:"local_resource_info,omitempty"`
	RuntimeStatus     string                 `protobuf:"bytes,18,opt,name=runtime_status,json=runtimeStatus,proto3" json:"runtime_status,omitempty"`
	UpdateStatus      string                 `protobuf:"bytes,29,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
	IsTiltfile        bool                   `protobuf:"varint,19,opt,name=is_tiltfile,json=isTiltfile,proto3" json:"is_tiltfile,omitempty"`
	Specs             []*TargetSpec          `protobuf:"bytes,27,rep,name=specs,proto3" json:"specs,omitempty"`
	Queued            bool                   `protobuf:"varint,25,opt,name=queued,proto3" json:"queued,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{5}
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetLastDeployTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeployTime
	}
	return nil
}

func (x *Resource) GetTriggerMode() int32 {
	if x != nil {
		return x.TriggerMode
	}
	return 0
}

func (x *Resource) GetBuildHistory() []*BuildRecord {
	if x != nil {
		return x.BuildHistory
	}
	return nil
}

func (x *Resource) GetCurrentBuild() *BuildRecord {
	if x != nil {
		return x.CurrentBuild
	}
	return nil
}

func (x *Resource) GetPendingBuildSince() *timestamppb.Timestamp {
	if x != nil {
		return x.PendingBuildSince
	}
	return nil
}

func (x *Resource) GetHasPendingChanges() bool {
	if x != nil {
		return x.HasPendingChanges
	}
	return false
}

func (x *Resource) GetEndpointLinks() []*Link {
	if x != nil {
		return x.EndpointLinks
	}
	return nil
}

func (x *Resource) GetPodID() string {
	if x != nil {
		return x.PodID
	}
	return ""
}

func (x *Resource) GetK8SResourceInfo() *K8SResourceInfo {
	if x != nil {
		return x.K8SResourceInfo
	}
	return nil
}

func (x *Resource) GetLocalResourceInfo() *LocalResourceInfo {
	if x != nil {
		return x.LocalResourceInfo
	}
	return nil
}

func (x *Resource) GetRuntimeStatus() string {
	if x != nil {
		return x.RuntimeStatus
	}
	return ""
}

func (x *Resource) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *Resource) GetIsTiltfile() bool {
	if x != nil {
		return x.IsTiltfile
	}
	return false
}

func (x *Resource) GetSpecs() []*TargetSpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Resource) GetQueued() bool {
	if x != nil {
		return x.Queued
	}
	return false
}

type TiltBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CommitSHA string `protobuf:"bytes,2,opt,name=commitSHA,proto3" json:"commitSHA,omitempty"`
	Date      string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Dev       bool   `protobuf:"varint,4,opt,name=dev,proto3" json:"dev,omitempty"`
}

func (x *TiltBuild) Reset() {
	*x = TiltBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiltBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiltBuild) ProtoMessage() {}

func (x *TiltBuild) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiltBuild.ProtoReflect.Descriptor instead.
func (*TiltBuild) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{6}
}

func (x *TiltBuild) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TiltBuild) GetCommitSHA() string {
	if x != nil {
		return x.CommitSHA
	}
	return ""
}

func (x *TiltBuild) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TiltBuild) GetDev() bool {
	if x != nil {
		return x.Dev
	}
	return false
}

type VersionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckUpdates bool `protobuf:"varint,1,opt,name=check_updates,json=checkUpdates,proto3" json:"check_updates,omitempty"`
}

func (x *VersionSettings) Reset() {
	*x = VersionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionSettings) ProtoMessage() {}

func (x *VersionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionSettings.ProtoReflect.Descriptor instead.
func (*VersionSettings) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{7}
}

func (x *VersionSettings) GetCheckUpdates() bool {
	if x != nil {
		return x.CheckUpdates
	}
	return false
}

// Our websocket service has two kinds of View messages:
//
// 1) On initialization, we send down the complete view state
//    (TiltStartTime, UISession, UIResources, and LogList)
//
// 2) On every change, we send down the resources that have
//    changed since the last send().
//    (new logs and any updated UISession/UIResource objects).
//
// All other fields are obsolete, but are needed for deserializing
// old snapshots.
type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log       string      `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// We used to have a setting that allowed users to dynamically
	// prepend timestamps in logs.
	DEPRECATEDLogTimestamps   bool             `protobuf:"varint,3,opt,name=DEPRECATED_log_timestamps,json=DEPRECATEDLogTimestamps,proto3" json:"DEPRECATED_log_timestamps,omitempty"`
	FeatureFlags              map[string]bool  `protobuf:"bytes,4,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NeedsAnalyticsNudge       bool             `protobuf:"varint,5,opt,name=needs_analytics_nudge,json=needsAnalyticsNudge,proto3" json:"needs_analytics_nudge,omitempty"`
	RunningTiltBuild          *TiltBuild       `protobuf:"bytes,6,opt,name=running_tilt_build,json=runningTiltBuild,proto3" json:"running_tilt_build,omitempty"`
	DEPRECATEDLatestTiltBuild *TiltBuild       `protobuf:"bytes,7,opt,name=DEPRECATED_latest_tilt_build,json=DEPRECATEDLatestTiltBuild,proto3" json:"DEPRECATED_latest_tilt_build,omitempty"`
	SuggestedTiltVersion      string           `protobuf:"bytes,16,opt,name=suggested_tilt_version,json=suggestedTiltVersion,proto3" json:"suggested_tilt_version,omitempty"`
	VersionSettings           *VersionSettings `protobuf:"bytes,12,opt,name=version_settings,json=versionSettings,proto3" json:"version_settings,omitempty"`
	TiltCloudUsername         string           `protobuf:"bytes,8,opt,name=tilt_cloud_username,json=tiltCloudUsername,proto3" json:"tilt_cloud_username,omitempty"`
	TiltCloudTeamName         string           `protobuf:"bytes,15,opt,name=tilt_cloud_team_name,json=tiltCloudTeamName,proto3" json:"tilt_cloud_team_name,omitempty"`
	TiltCloudSchemeHost       string           `protobuf:"bytes,9,opt,name=tilt_cloud_schemeHost,json=tiltCloudSchemeHost,proto3" json:"tilt_cloud_schemeHost,omitempty"`
	TiltCloudTeamID           string           `protobuf:"bytes,10,opt,name=tilt_cloud_teamID,json=tiltCloudTeamID,proto3" json:"tilt_cloud_teamID,omitempty"`
	FatalError                string           `protobuf:"bytes,11,opt,name=fatal_error,json=fatalError,proto3" json:"fatal_error,omitempty"`
	LogList                   *LogList         `protobuf:"bytes,13,opt,name=log_list,json=logList,proto3" json:"log_list,omitempty"`
	// Allows us to synchronize on a running Tilt intance,
	// so we can tell when Tilt restarted.
	TiltStartTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=tilt_start_time,json=tiltStartTime,proto3" json:"tilt_start_time,omitempty"`
	// an identifier for the tiltfile that is running, so that the web ui can store data per tiltfile
	TiltfileKey string `protobuf:"bytes,17,opt,name=tiltfile_key,json=tiltfileKey,proto3" json:"tiltfile_key,omitempty"`
	// New API-server based data models.
	UiSession   *v1alpha1.UISession    `protobuf:"bytes,19,opt,name=ui_session,json=uiSession,proto3" json:"ui_session,omitempty"`
	UiResources []*v1alpha1.UIResource `protobuf:"bytes,20,rep,name=ui_resources,json=uiResources,proto3" json:"ui_resources,omitempty"`
	UiButtons   []*v1alpha1.UIButton   `protobuf:"bytes,22,rep,name=ui_buttons,json=uiButtons,proto3" json:"ui_buttons,omitempty"`
	Clusters    []*v1alpha1.Cluster    `protobuf:"bytes,23,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// indicates that this view is a complete representation of the app
	// if false, this view just contains deltas from a previous view.
	IsComplete bool `protobuf:"varint,21,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{8}
}

func (x *View) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *View) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *View) GetDEPRECATEDLogTimestamps() bool {
	if x != nil {
		return x.DEPRECATEDLogTimestamps
	}
	return false
}

func (x *View) GetFeatureFlags() map[string]bool {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *View) GetNeedsAnalyticsNudge() bool {
	if x != nil {
		return x.NeedsAnalyticsNudge
	}
	return false
}

func (x *View) GetRunningTiltBuild() *TiltBuild {
	if x != nil {
		return x.RunningTiltBuild
	}
	return nil
}

func (x *View) GetDEPRECATEDLatestTiltBuild() *TiltBuild {
	if x != nil {
		return x.DEPRECATEDLatestTiltBuild
	}
	return nil
}

func (x *View) GetSuggestedTiltVersion() string {
	if x != nil {
		return x.SuggestedTiltVersion
	}
	return ""
}

func (x *View) GetVersionSettings() *VersionSettings {
	if x != nil {
		return x.VersionSettings
	}
	return nil
}

func (x *View) GetTiltCloudUsername() string {
	if x != nil {
		return x.TiltCloudUsername
	}
	return ""
}

func (x *View) GetTiltCloudTeamName() string {
	if x != nil {
		return x.TiltCloudTeamName
	}
	return ""
}

func (x *View) GetTiltCloudSchemeHost() string {
	if x != nil {
		return x.TiltCloudSchemeHost
	}
	return ""
}

func (x *View) GetTiltCloudTeamID() string {
	if x != nil {
		return x.TiltCloudTeamID
	}
	return ""
}

func (x *View) GetFatalError() string {
	if x != nil {
		return x.FatalError
	}
	return ""
}

func (x *View) GetLogList() *LogList {
	if x != nil {
		return x.LogList
	}
	return nil
}

func (x *View) GetTiltStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TiltStartTime
	}
	return nil
}

func (x *View) GetTiltfileKey() string {
	if x != nil {
		return x.TiltfileKey
	}
	return ""
}

func (x *View) GetUiSession() *v1alpha1.UISession {
	if x != nil {
		return x.UiSession
	}
	return nil
}

func (x *View) GetUiResources() []*v1alpha1.UIResource {
	if x != nil {
		return x.UiResources
	}
	return nil
}

func (x *View) GetUiButtons() []*v1alpha1.UIButton {
	if x != nil {
		return x.UiButtons
	}
	return nil
}

func (x *View) GetClusters() []*v1alpha1.Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *View) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type MetricsServing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether we're using the local or remote metrics stack.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// e.g., "localhost:10352"
	GrafanaHost string `protobuf:"bytes,2,opt,name=grafana_host,json=grafanaHost,proto3" json:"grafana_host,omitempty"`
}

func (x *MetricsServing) Reset() {
	*x = MetricsServing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsServing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsServing) ProtoMessage() {}

func (x *MetricsServing) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsServing.ProtoReflect.Descriptor instead.
func (*MetricsServing) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{9}
}

func (x *MetricsServing) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *MetricsServing) GetGrafanaHost() string {
	if x != nil {
		return x.GrafanaHost
	}
	return ""
}

type GetViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetViewRequest) Reset() {
	*x = GetViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewRequest) ProtoMessage() {}

func (x *GetViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewRequest.ProtoReflect.Descriptor instead.
func (*GetViewRequest) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{10}
}

type SnapshotHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginningLogID string `protobuf:"bytes,1,opt,name=beginning_logID,json=beginningLogID,proto3" json:"beginning_logID,omitempty"`
	EndingLogID    string `protobuf:"bytes,2,opt,name=ending_logID,json=endingLogID,proto3" json:"ending_logID,omitempty"`
	Text           string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SnapshotHighlight) Reset() {
	*x = SnapshotHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotHighlight) ProtoMessage() {}

func (x *SnapshotHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotHighlight.ProtoReflect.Descriptor instead.
func (*SnapshotHighlight) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{11}
}

func (x *SnapshotHighlight) GetBeginningLogID() string {
	if x != nil {
		return x.BeginningLogID
	}
	return ""
}

func (x *SnapshotHighlight) GetEndingLogID() string {
	if x != nil {
		return x.EndingLogID
	}
	return ""
}

func (x *SnapshotHighlight) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View              *View              `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	IsSidebarClosed   bool               `protobuf:"varint,2,opt,name=is_sidebar_closed,json=isSidebarClosed,proto3" json:"is_sidebar_closed,omitempty"`
	Path              string             `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	SnapshotHighlight *SnapshotHighlight `protobuf:"bytes,4,opt,name=snapshot_highlight,json=snapshotHighlight,proto3" json:"snapshot_highlight,omitempty"`
	SnapshotLink      string             `protobuf:"bytes,5,opt,name=snapshot_link,json=snapshotLink,proto3" json:"snapshot_link,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{12}
}

func (x *Snapshot) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Snapshot) GetIsSidebarClosed() bool {
	if x != nil {
		return x.IsSidebarClosed
	}
	return false
}

func (x *Snapshot) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Snapshot) GetSnapshotHighlight() *SnapshotHighlight {
	if x != nil {
		return x.SnapshotHighlight
	}
	return nil
}

func (x *Snapshot) GetSnapshotLink() string {
	if x != nil {
		return x.SnapshotLink
	}
	return ""
}

type UploadSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploadSnapshotResponse) Reset() {
	*x = UploadSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSnapshotResponse) ProtoMessage() {}

func (x *UploadSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSnapshotResponse.ProtoReflect.Descriptor instead.
func (*UploadSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{13}
}

func (x *UploadSnapshotResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// NOTE(nick): This is obsolete.
//
// Our websocket service has two kinds of messages:
// 1) On initialization, we send down the complete view state
// 2) On every change, we send down the resources that have
//    changed since the last send().
type AckWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The to_checkpoint on the received LogList
	ToCheckpoint int32 `protobuf:"varint,1,opt,name=to_checkpoint,json=toCheckpoint,proto3" json:"to_checkpoint,omitempty"`
	// Allows us to synchronize on a running Tilt intance,
	// so we can tell when we're talking to the same Tilt.
	TiltStartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tilt_start_time,json=tiltStartTime,proto3" json:"tilt_start_time,omitempty"`
}

func (x *AckWebsocketRequest) Reset() {
	*x = AckWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckWebsocketRequest) ProtoMessage() {}

func (x *AckWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckWebsocketRequest.ProtoReflect.Descriptor instead.
func (*AckWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{14}
}

func (x *AckWebsocketRequest) GetToCheckpoint() int32 {
	if x != nil {
		return x.ToCheckpoint
	}
	return 0
}

func (x *AckWebsocketRequest) GetTiltStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TiltStartTime
	}
	return nil
}

type AckWebsocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckWebsocketResponse) Reset() {
	*x = AckWebsocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_webview_view_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckWebsocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckWebsocketResponse) ProtoMessage() {}

func (x *AckWebsocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_webview_view_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckWebsocketResponse.ProtoReflect.Descriptor instead.
func (*AckWebsocketResponse) Descriptor() ([]byte, []int) {
	return file_pkg_webview_view_proto_rawDescGZIP(), []int{15}
}

var File_pkg_webview_view_proto protoreflect.FileDescriptor

var file_pkg_webview_view_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65,
	0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6d, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x65,
	0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa6,
	0x02, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63,
	0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x05, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x4b, 0x38, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x5f, 0x6c, 0x6f, 0x67, 0x22, 0x3e, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x54, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa4, 0x08, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x11, 0x6b, 0x38,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x4b, 0x38, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6b, 0x38, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74,
	0x69, 0x6c, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x54, 0x69, 0x6c, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10,
	0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x15,
	0x10, 0x16, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x4a, 0x04,
	0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52,
	0x0d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x14,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x63, 0x72, 0x61,
	0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x52, 0x11, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x09, 0x54, 0x69, 0x6c,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x48, 0x41, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x48, 0x41, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x22, 0x36, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x0a, 0x0a,
	0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x62,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65,
	0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x75,
	0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x12, 0x40,
	0x0a, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x69, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x10,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x53, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x54, 0x69, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6c, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x69, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x69, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x69, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x69, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6c, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6c, 0x74, 0x66,
	0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x0a, 0x75, 0x69, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x69, 0x6c, 0x74, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x49, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x0c, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x69,
	0x6c, 0x74, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x49, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0a, 0x75, 0x69, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x69, 0x6c, 0x74,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x49, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x09, 0x75, 0x69, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x69, 0x6c, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x69, 0x6c, 0x74, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x22, 0x47, 0x0a, 0x0e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x48,
	0x6f, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x11, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x67, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x2a, 0x0a, 0x16, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x7e, 0x0a, 0x13, 0x41, 0x63, 0x6b, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x8c,
	0x01, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4b, 0x38, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x32, 0xb7, 0x01,
	0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x62, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2f, 0x6e, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x32, 0x7a, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x41,
	0x63, 0x6b, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x65,
	0x62, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x41, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x41, 0x63, 0x6b, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x22, 0x0e, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x69, 0x6c, 0x74, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x74, 0x69, 0x6c, 0x74, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_webview_view_proto_rawDescOnce sync.Once
	file_pkg_webview_view_proto_rawDescData = file_pkg_webview_view_proto_rawDesc
)

func file_pkg_webview_view_proto_rawDescGZIP() []byte {
	file_pkg_webview_view_proto_rawDescOnce.Do(func() {
		file_pkg_webview_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_webview_view_proto_rawDescData)
	})
	return file_pkg_webview_view_proto_rawDescData
}

var file_pkg_webview_view_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_webview_view_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_webview_view_proto_goTypes = []interface{}{
	(TargetType)(0),                // 0: webview.TargetType
	(*TargetSpec)(nil),             // 1: webview.TargetSpec
	(*BuildRecord)(nil),            // 2: webview.BuildRecord
	(*K8SResourceInfo)(nil),        // 3: webview.K8sResourceInfo
	(*LocalResourceInfo)(nil),      // 4: webview.LocalResourceInfo
	(*Link)(nil),                   // 5: webview.Link
	(*Resource)(nil),               // 6: webview.Resource
	(*TiltBuild)(nil),              // 7: webview.TiltBuild
	(*VersionSettings)(nil),        // 8: webview.VersionSettings
	(*View)(nil),                   // 9: webview.View
	(*MetricsServing)(nil),         // 10: webview.MetricsServing
	(*GetViewRequest)(nil),         // 11: webview.GetViewRequest
	(*SnapshotHighlight)(nil),      // 12: webview.SnapshotHighlight
	(*Snapshot)(nil),               // 13: webview.Snapshot
	(*UploadSnapshotResponse)(nil), // 14: webview.UploadSnapshotResponse
	(*AckWebsocketRequest)(nil),    // 15: webview.AckWebsocketRequest
	(*AckWebsocketResponse)(nil),   // 16: webview.AckWebsocketResponse
	nil,                            // 17: webview.View.FeatureFlagsEntry
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
	(*LogList)(nil),                // 19: webview.LogList
	(*v1alpha1.UISession)(nil),     // 20: github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UISession
	(*v1alpha1.UIResource)(nil),    // 21: github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIResource
	(*v1alpha1.UIButton)(nil),      // 22: github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIButton
	(*v1alpha1.Cluster)(nil),       // 23: github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.Cluster
}
var file_pkg_webview_view_proto_depIdxs = []int32{
	0,  // 0: webview.TargetSpec.type:type_name -> webview.TargetType
	18, // 1: webview.BuildRecord.start_time:type_name -> google.protobuf.Timestamp
	18, // 2: webview.BuildRecord.finish_time:type_name -> google.protobuf.Timestamp
	18, // 3: webview.Resource.last_deploy_time:type_name -> google.protobuf.Timestamp
	2,  // 4: webview.Resource.build_history:type_name -> webview.BuildRecord
	2,  // 5: webview.Resource.current_build:type_name -> webview.BuildRecord
	18, // 6: webview.Resource.pending_build_since:type_name -> google.protobuf.Timestamp
	5,  // 7: webview.Resource.endpoint_links:type_name -> webview.Link
	3,  // 8: webview.Resource.k8s_resource_info:type_name -> webview.K8sResourceInfo
	4,  // 9: webview.Resource.local_resource_info:type_name -> webview.LocalResourceInfo
	1,  // 10: webview.Resource.specs:type_name -> webview.TargetSpec
	6,  // 11: webview.View.resources:type_name -> webview.Resource
	17, // 12: webview.View.feature_flags:type_name -> webview.View.FeatureFlagsEntry
	7,  // 13: webview.View.running_tilt_build:type_name -> webview.TiltBuild
	7,  // 14: webview.View.DEPRECATED_latest_tilt_build:type_name -> webview.TiltBuild
	8,  // 15: webview.View.version_settings:type_name -> webview.VersionSettings
	19, // 16: webview.View.log_list:type_name -> webview.LogList
	18, // 17: webview.View.tilt_start_time:type_name -> google.protobuf.Timestamp
	20, // 18: webview.View.ui_session:type_name -> github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UISession
	21, // 19: webview.View.ui_resources:type_name -> github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIResource
	22, // 20: webview.View.ui_buttons:type_name -> github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIButton
	23, // 21: webview.View.clusters:type_name -> github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.Cluster
	9,  // 22: webview.Snapshot.view:type_name -> webview.View
	12, // 23: webview.Snapshot.snapshot_highlight:type_name -> webview.SnapshotHighlight
	18, // 24: webview.AckWebsocketRequest.tilt_start_time:type_name -> google.protobuf.Timestamp
	11, // 25: webview.ViewService.GetView:input_type -> webview.GetViewRequest
	13, // 26: webview.ViewService.UploadSnapshot:input_type -> webview.Snapshot
	15, // 27: webview.WebsocketService.AckWebsocket:input_type -> webview.AckWebsocketRequest
	9,  // 28: webview.ViewService.GetView:output_type -> webview.View
	14, // 29: webview.ViewService.UploadSnapshot:output_type -> webview.UploadSnapshotResponse
	16, // 30: webview.WebsocketService.AckWebsocket:output_type -> webview.AckWebsocketResponse
	28, // [28:31] is the sub-list for method output_type
	25, // [25:28] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_pkg_webview_view_proto_init() }
func file_pkg_webview_view_proto_init() {
	if File_pkg_webview_view_proto != nil {
		return
	}
	file_pkg_webview_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_webview_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiltBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsServing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_webview_view_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckWebsocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_webview_view_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pkg_webview_view_proto_goTypes,
		DependencyIndexes: file_pkg_webview_view_proto_depIdxs,
		EnumInfos:         file_pkg_webview_view_proto_enumTypes,
		MessageInfos:      file_pkg_webview_view_proto_msgTypes,
	}.Build()
	File_pkg_webview_view_proto = out.File
	file_pkg_webview_view_proto_rawDesc = nil
	file_pkg_webview_view_proto_goTypes = nil
	file_pkg_webview_view_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewServiceClient interface {
	GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error)
	UploadSnapshot(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*UploadSnapshotResponse, error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*View, error) {
	out := new(View)
	err := c.cc.Invoke(ctx, "/webview.ViewService/GetView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) UploadSnapshot(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*UploadSnapshotResponse, error) {
	out := new(UploadSnapshotResponse)
	err := c.cc.Invoke(ctx, "/webview.ViewService/UploadSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServiceServer is the server API for ViewService service.
type ViewServiceServer interface {
	GetView(context.Context, *GetViewRequest) (*View, error)
	UploadSnapshot(context.Context, *Snapshot) (*UploadSnapshotResponse, error)
}

// UnimplementedViewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (*UnimplementedViewServiceServer) GetView(context.Context, *GetViewRequest) (*View, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (*UnimplementedViewServiceServer) UploadSnapshot(context.Context, *Snapshot) (*UploadSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSnapshot not implemented")
}

func RegisterViewServiceServer(s *grpc.Server, srv ViewServiceServer) {
	s.RegisterService(&_ViewService_serviceDesc, srv)
}

func _ViewService_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webview.ViewService/GetView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GetView(ctx, req.(*GetViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_UploadSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Snapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).UploadSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webview.ViewService/UploadSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).UploadSnapshot(ctx, req.(*Snapshot))
	}
	return interceptor(ctx, in, info, handler)
}

var _ViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webview.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetView",
			Handler:    _ViewService_GetView_Handler,
		},
		{
			MethodName: "UploadSnapshot",
			Handler:    _ViewService_UploadSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/webview/view.proto",
}

// WebsocketServiceClient is the client API for WebsocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebsocketServiceClient interface {
	AckWebsocket(ctx context.Context, in *AckWebsocketRequest, opts ...grpc.CallOption) (*AckWebsocketResponse, error)
}

type websocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketServiceClient(cc grpc.ClientConnInterface) WebsocketServiceClient {
	return &websocketServiceClient{cc}
}

func (c *websocketServiceClient) AckWebsocket(ctx context.Context, in *AckWebsocketRequest, opts ...grpc.CallOption) (*AckWebsocketResponse, error) {
	out := new(AckWebsocketResponse)
	err := c.cc.Invoke(ctx, "/webview.WebsocketService/AckWebsocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServiceServer is the server API for WebsocketService service.
type WebsocketServiceServer interface {
	AckWebsocket(context.Context, *AckWebsocketRequest) (*AckWebsocketResponse, error)
}

// UnimplementedWebsocketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWebsocketServiceServer struct {
}

func (*UnimplementedWebsocketServiceServer) AckWebsocket(context.Context, *AckWebsocketRequest) (*AckWebsocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckWebsocket not implemented")
}

func RegisterWebsocketServiceServer(s *grpc.Server, srv WebsocketServiceServer) {
	s.RegisterService(&_WebsocketService_serviceDesc, srv)
}

func _WebsocketService_AckWebsocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckWebsocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).AckWebsocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webview.WebsocketService/AckWebsocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).AckWebsocket(ctx, req.(*AckWebsocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebsocketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webview.WebsocketService",
	HandlerType: (*WebsocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckWebsocket",
			Handler:    _WebsocketService_AckWebsocket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/webview/view.proto",
}

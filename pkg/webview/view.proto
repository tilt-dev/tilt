syntax = "proto3";

package webview;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "pkg/webview/log.proto";
import "pkg/apis/core/v1alpha1/generated.proto";

option go_package = "github.com/tilt-dev/tilt/pkg/webview";


// Correspond to implementations of the TargetSpec interface
enum TargetType {
  TARGET_TYPE_UNSPECIFIED = 0;
  TARGET_TYPE_IMAGE = 1;
  TARGET_TYPE_K8S = 2;
  TARGET_TYPE_DOCKER_COMPOSE = 3;
  TARGET_TYPE_LOCAL = 4;
}

message TargetSpec {
  string id = 1;
  TargetType type = 2;
  bool has_live_update = 3;
}

message BuildRecord {
  reserved "edits";
  reserved 1;
  
  string error = 2;
  repeated string warnings = 3;
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp finish_time  = 5;

  reserved "update_types";
  reserved 9;

  reserved "log";
  reserved 6;

  bool is_crash_rebuild = 7;

  // The span id for this build record's logs in the main logstore.
  string span_id = 8;
}

message K8sResourceInfo {
  string pod_name = 1;
  string pod_creation_time = 2;
  string pod_update_start_time = 3;
  string pod_status = 4;
  string pod_status_message = 5;
  bool all_containers_ready = 6;
  int32 pod_restarts = 7;

  // pod logs are now in the log store
  reserved "pod_log";
  reserved 8;

  // The span id for this pod's logs in the main logstore
  string span_id = 9;

  repeated string display_names = 10;
}

message LocalResourceInfo {
  int64 pid = 1;
  bool is_test = 2;
}

message Link {
  string url = 1;
  string name = 2;
}

message Resource {
  string name = 1;

  reserved "directories_watched";
  reserved 2;

  reserved "paths_watched";
  reserved 3;

  google.protobuf.Timestamp last_deploy_time = 4;
  int32 trigger_mode = 5;
  repeated BuildRecord build_history = 6;
  BuildRecord current_build = 7;

  reserved "pending_build_reason";
  reserved 8;

  reserved "pending_build_edits";
  reserved 9;
  
  google.protobuf.Timestamp pending_build_since = 10;
  bool has_pending_changes = 11;

  // Endpoints used to be sent as strings, but now contain extra info
  reserved "endpoints";
  reserved 12;

  repeated Link endpoint_links = 28;
  string podID = 13;
  K8sResourceInfo k8s_resource_info = 14;

  reserved "dc_resource_info";
  reserved 15;

  reserved "yaml_resource_info";
  reserved 16;
  
  LocalResourceInfo local_resource_info = 17;
  string runtime_status = 18;
  string update_status = 29;
  bool is_tiltfile = 19;
  repeated TargetSpec specs = 27;

  reserved "show_build_status";
  reserved 20;

  // Resource logs are now stored in the log store.
  reserved "combined_log";
  reserved 21;

  // Obsoleted by crash_log_span_id.
  reserved "crash_log";
  reserved 22;

  // A span id for the log that crashed.
  reserved "crash_log_span_id";
  reserved 26;

  // Alerts are currently client-side only, and not
  // sent in the payload.
  reserved "alerts";
  reserved 23;

  // Facets have been removed from the UI. They may come back in a future protocol. See:
  // https://github.com/tilt-dev/tilt/issues/4148
  // https://github.com/tilt-dev/tilt/issues/4219
  reserved "facets";
  reserved 24;
  
  bool queued = 25;

  // NEXT ID: 30
}

message TiltBuild {
  string version = 1;
  string commitSHA = 2;
  string date = 3;
  bool dev = 4;
}

message VersionSettings {
  bool check_updates = 1;
}

// Our websocket service has two kinds of View messages:
//
// 1) On initialization, we send down the complete view state
//    (TiltStartTime, UISession, UIResources, and LogList)
//
// 2) On every change, we send down the resources that have
//    changed since the last send().
//    (new logs and any updated UISession/UIResource objects).
//
// All other fields are obsolete, but are needed for deserializing
// old snapshots.
message View {
  string log = 1;
  repeated Resource resources = 2;

  // We used to have a setting that allowed users to dynamically
  // prepend timestamps in logs.
  bool DEPRECATED_log_timestamps = 3;

  map<string, bool> feature_flags = 4;

  bool needs_analytics_nudge = 5;

  TiltBuild running_tilt_build = 6;
  TiltBuild DEPRECATED_latest_tilt_build = 7;
  string suggested_tilt_version = 16;
  VersionSettings version_settings = 12;

  string tilt_cloud_username = 8;
  string tilt_cloud_team_name = 15;
  string tilt_cloud_schemeHost = 9;
  string tilt_cloud_teamID = 10;

  string fatal_error = 11;

  LogList log_list = 13;

  // Allows us to synchronize on a running Tilt intance,
  // so we can tell when Tilt restarted.
  google.protobuf.Timestamp tilt_start_time = 14;

  // an identifier for the tiltfile that is running, so that the web ui can store data per tiltfile
  string tiltfile_key = 17;

  reserved "metrics_serving";
  reserved 18;

  // New API-server based data models.
  github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UISession ui_session = 19;
  repeated github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIResource ui_resources = 20;
  repeated github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.UIButton ui_buttons = 22;
  repeated github.com.tilt_dev.tilt.pkg.apis.core.v1alpha1.Cluster clusters = 23;

  // indicates that this view is a complete representation of the app
  // if false, this view just contains deltas from a previous view.
  bool is_complete = 21;
}

message MetricsServing {
  // Whether we're using the local or remote metrics stack.
  string mode = 1;

  // e.g., "localhost:10352"
  string grafana_host = 2;
}

message GetViewRequest {}

message SnapshotHighlight {
  string beginning_logID = 1;
  string ending_logID = 2;
  string text = 3;
}

message Snapshot {
  View view = 1;
  bool is_sidebar_closed = 2;
  string path = 3;
  SnapshotHighlight snapshot_highlight = 4;
  string snapshot_link = 5;
}

message UploadSnapshotResponse {
  string url = 1;
}

// NOTE(nick): This is obsolete.
//
// Our websocket service has two kinds of messages:
// 1) On initialization, we send down the complete view state
// 2) On every change, we send down the resources that have
//    changed since the last send().
message AckWebsocketRequest {
  // The to_checkpoint on the received LogList
  int32 to_checkpoint = 1;

  // Allows us to synchronize on a running Tilt intance,
  // so we can tell when we're talking to the same Tilt.
  google.protobuf.Timestamp tilt_start_time = 2;
}

message AckWebsocketResponse {}

// These services need to be here for the generated TS to be generated
service ViewService {
  rpc GetView(GetViewRequest) returns (View) {
    option (google.api.http) = {
      get: "/api/view"
    };
  }

  rpc UploadSnapshot(Snapshot) returns (UploadSnapshotResponse) {
    option (google.api.http) = {
      post: "/api/snapshot/new"
      body: "*"
    };
  }
}

// This is a fake service, so that we do codegen for the websocket protocol messages.
service WebsocketService {
  rpc AckWebsocket(AckWebsocketRequest) returns (AckWebsocketResponse) {
    option (google.api.http) = {
     post: "/websocket/ack"
      body: "*"
    };
  }
}

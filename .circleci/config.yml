version: 2
jobs:
  build-linux:
    docker:
      - image: gcr.io/windmill-public-containers/tilt-ci@sha256:e6a2a7810140dc5d42fed8a9bcd1fba78c7ed6951981d86266120e31f820a050
    working_directory: /go/src/github.com/windmilleng/tilt
    steps:
      - checkout
      - run: echo 'export PATH=~/go/bin:$PATH' >> $BASH_ENV
      - setup_remote_docker
      - run: docker pull registry:2
      - run: make check-go
      - store_test_results:
          path: test-results

  build-js:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: make test-js

  build-integration:
    docker:
      - image: gcr.io/windmill-public-containers/tilt-integration-ci@sha256:acec968a2834d811309eb4efeb27e5e73dd600fdc78604d77ef508045bde592d
    working_directory: /go/src/github.com/windmilleng/tilt
    steps:
      - checkout
      - run: echo 'export PATH=~/go/bin:$PATH' >> $BASH_ENV
      - setup_remote_docker
      - run: echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
      # NOTE(nick): Integration tests currently push images to windmill-test-containers,
      # so we need to use a gcloud service account.
      # I'm not super happy with this solution. I'd prefer we ran a local registry.
      # But this is hard to coordinate effectively.
      - run: |
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gcloud auth configure-docker
      # Cleaning is helpful when running with the local circleci toolchain
      - run: /go/dind-cluster.sh clean
      - run: docker kill portforward || exit 0
      - run: docker rm portforward || exit 0
      - run: /go/portforward.sh start
      - run: DIND_PORT_FORWARDER_WAIT=1 DIND_PORT_FORWARDER="/go/portforward.sh" NUM_NODES=1 /go/dind-cluster.sh up
      - run: /go/portforward.sh -wait $(/go/dind-cluster.sh apiserver-port) &&
             kubectl get nodes &&
             make integration

  build-macos:
    macos:
      xcode: "10.0.0"

    working_directory: ~/go/src/github.com/windmilleng/tilt
    steps:
      - checkout
      - restore_cache:
          keys:
            - homebrew_cache_v10
      # Bump cache version when changing this.
      - run: echo 'export HOMEBREW_PACKAGES="go@1.12 kustomize docker-compose"' >> $BASH_ENV
      # Only update when brew doesn't know about some of the packages because:
      # 1) not worth the cost, and
      # 2) hits github in a way that leads to flakyness
      - run: brew info ${HOMEBREW_PACKAGES} || brew update || true
      - run: HOMEBREW_NO_AUTO_UPDATE=true brew install ${HOMEBREW_PACKAGES}
      - save_cache:
          paths:
            - /usr/local/Homebrew
          key: homebrew_cache_v10
      - run: echo 'export PATH="/usr/local/opt/go@1.12/bin:$PATH"' >> $BASH_ENV
      # NOTE(dmiller): the helm package in Homebrew is too old, and the tests fail. Install from GitHub instead.
      - run: curl --silent --show-error --location --fail --retry 3 --output /tmp/helm.tar.gz  https://storage.googleapis.com/kubernetes-helm/helm-v2.12.1-darwin-amd64.tar.gz &&
             tar -xz -C /tmp -f /tmp/helm.tar.gz &&
             mv /tmp/darwin-amd64/helm /usr/local/bin/helm
      - run: go get -u gotest.tools/gotestsum
      # We can't run the container tests on macos because nested
      # VMs don't work on circleci.
      - run: mkdir -p test-results
      - run: ~/go/bin/gotestsum --format standard-quiet --junitfile test-results/unit-tests.xml -- -tags 'skipcontainertests' ./...
      - store_test_results:
          path: test-results

workflows:
  version: 2
  build:
    # The linux job is cheaper than the others, so run that first.
    jobs:
      - build-linux
      - build-js:
          requires:
            - build-linux
      - build-macos:
          requires:
            - build-linux
      - build-integration:
          requires:
            - build-linux

# Welcome to Tilt!
# To get you started as quickly as possible, we have created this generic Tiltfile. 
# Modify and comment out any commands to make them work for you.
print("""
âœ¨ Hello Tilt! This appears in the (Tiltfile) pane whenever Tilt evaluates this file.

Open {tiltfile_path} in your favorite editor to get started.
""".format(tiltfile_path=config.main_path))

# Run a one-time command e.g. to install prerequisites
# `cmd_bat`, when present, is used instead of `cmd` on Windows.
# More info: https://docs.tilt.dev/local_resource.html
#
# local_resource('install-commands',
#                cmd='which helm > /dev/null || brew install helm',
#                cmd_bat=['powershell.exe', '-Noninteractive', '-Command', '& {if (!(Get-Command helm -ErrorAction SilentlyContinue)) {scoop install helm}}'])


# Build docker image for a resource
# More info on https://docs.tilt.dev/api.html#api.docker_build
#
# docker_build('my-resource-image-name', '.', dockerfile='deploy/docs.dockerfile',
              # Define the only files that are relevant for the docker build
              # only=['./src', './healthcheck.sh', './docs'],
              # Define steps for updating a running container, more info on https://docs.tilt.dev/live_update_reference.html
              # live_update=[
                # Specify where files should be synced to from host to container system
                # sync('./src', '/src/'),
                # Specify the command to be executed when updating a container, run only when files defined in "trigger" list changed
                # run('sync.sh', trigger=['watched-file'])
              # ]
# )

# Apply k8s manifests
# More info: https://docs.tilt.dev/api.html#api.k8s_yaml
#
# k8s_yaml(['k8s/deployment.yaml', 'k8s/service.yaml'])

# Configure a k8s resource for port forwarding
# 'my-resource' can be anything you wish, but often will align with a name
# of a deployment in the deployment manifest (k8s/deployment.yaml above).
# More info: https://docs.tilt.dev/api.html#api.k8s_resource
#
# k8s_resource('my-resource', port_forwards=[5000])

# You can package related resources and statements in a function. Here we
# checkout and load the tilt-avatars demo app from Github using `git_checkout`
# from the `git_resource` extension.
load('ext://git_resource', 'git_checkout')
def tilt_demo():
    if os.path.exists('tilt-avatars/Tiltfile'):
        load_dynamic('tilt-avatars/Tiltfile')
    watch_file('tilt-avatars/Tiltfile')
    git_checkout('https://github.com/tilt-dev/tilt-avatars.git', checkout_dir='tilt-avatars')

# Uncomment the tilt_demo() invocation to see it in action.
#tilt_demo()

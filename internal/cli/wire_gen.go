// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cli

import (
	context "context"
	build "github.com/windmilleng/tilt/internal/build"
	engine "github.com/windmilleng/tilt/internal/engine"
	k8s "github.com/windmilleng/tilt/internal/k8s"
	model "github.com/windmilleng/tilt/internal/model"
	service "github.com/windmilleng/tilt/internal/service"
)

// Injectors from wire.go:

func wireServiceCreator(ctx context.Context, browser engine.BrowserMode) (model.ServiceCreator, error) {
	env, err := k8s.DetectEnv()
	if err != nil {
		return nil, err
	}
	dockerCli, err := build.DefaultDockerClient(ctx, env)
	if err != nil {
		return nil, err
	}
	containerUpdater := build.NewContainerUpdater(dockerCli)
	kubectlClient := k8s.NewKubectlClient(ctx, env)
	console := build.DefaultConsole()
	writer := build.DefaultOut()
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(dockerCli, console, writer, labels)
	imageBuilder := build.DefaultImageBuilder(dockerImageBuilder)
	imageBuildAndDeployer, err := engine.NewImageBuildAndDeployer(imageBuilder, kubectlClient, env)
	if err != nil {
		return nil, err
	}
	bool2 := engine.DefaultSkipContainer()
	containerBuildAndDeployer := engine.NewContainerBuildAndDeployer(containerUpdater, env, kubectlClient, imageBuildAndDeployer, bool2)
	imageReaper := build.NewImageReaper(dockerCli)
	upper := engine.NewUpper(ctx, containerBuildAndDeployer, kubectlClient, browser, imageReaper)
	manager := service.ProvideMemoryManager()
	serviceCreator := provideServiceCreator(upper, manager)
	return serviceCreator, nil
}

var (
	_wireLabelsValue = build.Labels{}
)

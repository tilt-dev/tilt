// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cli

import (
	context "context"
	build "github.com/windmilleng/tilt/internal/build"
	engine "github.com/windmilleng/tilt/internal/engine"
	k8s "github.com/windmilleng/tilt/internal/k8s"
	model "github.com/windmilleng/tilt/internal/model"
)

// Injectors from wire.go:

func wireServiceCreator(ctx context.Context, browser engine.BrowserMode) (model.ManifestCreator, error) {
	env, err := k8s.DetectEnv()
	if err != nil {
		return nil, err
	}
	syncletClient, err := engine.DefaultSyncletClient(env)
	if err != nil {
		return nil, err
	}
	kubectlClient := k8s.NewKubectlClient(ctx, env)
	syncletBuildAndDeployer := engine.NewSyncletBuildAndDeployer(syncletClient, kubectlClient)
	dockerCli, err := build.DefaultDockerClient(ctx, env)
	if err != nil {
		return nil, err
	}
	containerUpdater := build.NewContainerUpdater(dockerCli)
	analytics, err := provideAnalytics()
	if err != nil {
		return nil, err
	}
	localContainerBuildAndDeployer := engine.NewLocalContainerBuildAndDeployer(containerUpdater, env, kubectlClient, analytics)
	console := build.DefaultConsole()
	writer := build.DefaultOut()
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(dockerCli, console, writer, labels)
	imageBuilder := build.DefaultImageBuilder(dockerImageBuilder)
	imageBuildAndDeployer := engine.NewImageBuildAndDeployer(imageBuilder, kubectlClient, env, analytics)
	buildOrder := engine.DefaultBuildOrder(syncletBuildAndDeployer, localContainerBuildAndDeployer, imageBuildAndDeployer, env)
	fallbackTester := engine.DefaultShouldFallBack()
	compositeBuildAndDeployer := engine.NewCompositeBuildAndDeployer(buildOrder, fallbackTester)
	imageReaper := build.NewImageReaper(dockerCli)
	upper := engine.NewUpper(ctx, compositeBuildAndDeployer, kubectlClient, browser, imageReaper)
	return upper, nil
}

var (
	_wireLabelsValue = build.Labels{}
)

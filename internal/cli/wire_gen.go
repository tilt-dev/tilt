// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cli

import (
	"context"
	"time"

	"github.com/google/wire"
	"github.com/jonboulle/clockwork"
	"github.com/tilt-dev/wmclient/pkg/dirs"
	"go.opentelemetry.io/otel/sdk/trace"
	version2 "k8s.io/apimachinery/pkg/version"
	"k8s.io/client-go/tools/clientcmd/api"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/tilt-dev/tilt/internal/analytics"
	"github.com/tilt-dev/tilt/internal/build"
	client2 "github.com/tilt-dev/tilt/internal/cli/client"
	"github.com/tilt-dev/tilt/internal/cloud"
	"github.com/tilt-dev/tilt/internal/cloud/cloudurl"
	"github.com/tilt-dev/tilt/internal/container"
	"github.com/tilt-dev/tilt/internal/containerupdate"
	"github.com/tilt-dev/tilt/internal/controllers"
	"github.com/tilt-dev/tilt/internal/controllers/core/cmd"
	"github.com/tilt-dev/tilt/internal/controllers/core/extension"
	"github.com/tilt-dev/tilt/internal/controllers/core/extensionrepo"
	"github.com/tilt-dev/tilt/internal/controllers/core/filewatch"
	"github.com/tilt-dev/tilt/internal/controllers/core/filewatch/fsevent"
	"github.com/tilt-dev/tilt/internal/controllers/core/kubernetesapply"
	"github.com/tilt-dev/tilt/internal/controllers/core/kubernetesdiscovery"
	"github.com/tilt-dev/tilt/internal/controllers/core/podlogstream"
	"github.com/tilt-dev/tilt/internal/controllers/core/portforward"
	tiltfile2 "github.com/tilt-dev/tilt/internal/controllers/core/tiltfile"
	"github.com/tilt-dev/tilt/internal/controllers/core/uibutton"
	"github.com/tilt-dev/tilt/internal/controllers/core/uiresource"
	"github.com/tilt-dev/tilt/internal/controllers/core/uisession"
	"github.com/tilt-dev/tilt/internal/docker"
	"github.com/tilt-dev/tilt/internal/dockercompose"
	"github.com/tilt-dev/tilt/internal/dockerfile"
	"github.com/tilt-dev/tilt/internal/engine"
	analytics2 "github.com/tilt-dev/tilt/internal/engine/analytics"
	"github.com/tilt-dev/tilt/internal/engine/buildcontrol"
	"github.com/tilt-dev/tilt/internal/engine/configs"
	"github.com/tilt-dev/tilt/internal/engine/dcwatch"
	"github.com/tilt-dev/tilt/internal/engine/dockerprune"
	"github.com/tilt-dev/tilt/internal/engine/k8srollout"
	"github.com/tilt-dev/tilt/internal/engine/k8swatch"
	"github.com/tilt-dev/tilt/internal/engine/local"
	"github.com/tilt-dev/tilt/internal/engine/metrics"
	"github.com/tilt-dev/tilt/internal/engine/runtimelog"
	"github.com/tilt-dev/tilt/internal/engine/session"
	"github.com/tilt-dev/tilt/internal/engine/telemetry"
	uiresource2 "github.com/tilt-dev/tilt/internal/engine/uiresource"
	uisession2 "github.com/tilt-dev/tilt/internal/engine/uisession"
	"github.com/tilt-dev/tilt/internal/feature"
	"github.com/tilt-dev/tilt/internal/git"
	"github.com/tilt-dev/tilt/internal/hud"
	"github.com/tilt-dev/tilt/internal/hud/prompt"
	"github.com/tilt-dev/tilt/internal/hud/server"
	"github.com/tilt-dev/tilt/internal/k8s"
	"github.com/tilt-dev/tilt/internal/localexec"
	"github.com/tilt-dev/tilt/internal/openurl"
	"github.com/tilt-dev/tilt/internal/store"
	"github.com/tilt-dev/tilt/internal/tiltfile"
	"github.com/tilt-dev/tilt/internal/tiltfile/config"
	"github.com/tilt-dev/tilt/internal/tiltfile/k8scontext"
	"github.com/tilt-dev/tilt/internal/tiltfile/version"
	"github.com/tilt-dev/tilt/internal/token"
	"github.com/tilt-dev/tilt/internal/tracer"
	"github.com/tilt-dev/tilt/internal/user"
	"github.com/tilt-dev/tilt/internal/xdg"
	"github.com/tilt-dev/tilt/pkg/apis/core/v1alpha1"
	"github.com/tilt-dev/tilt/pkg/logger"
	"github.com/tilt-dev/tilt/pkg/model"
)

// Injectors from wire.go:

func wireTiltfileResult(ctx context.Context, analytics2 *analytics.TiltAnalytics, subcommand model.TiltSubcommand) (cmdTiltfileResultDeps, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return cmdTiltfileResultDeps{}, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return cmdTiltfileResultDeps{}, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	client := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	extension := k8scontext.NewExtension(kubeContext, env)
	tiltBuild := provideTiltInfo()
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	runtime := k8s.ProvideContainerRuntime(ctx, client)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	webHost := provideWebHost()
	webPort := provideWebPort()
	localexecEnv := localexec.DefaultEnv(webPort, webHost)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(analytics2, client, extension, versionExtension, configExtension, dockerComposeClient, webHost, localexecEnv, defaults, env)
	cliCmdTiltfileResultDeps := newTiltfileResultDeps(tiltfileLoader)
	return cliCmdTiltfileResultDeps, nil
}

var (
	_wireDefaultsValue = feature.MainDefaults
)

func wireDockerPrune(ctx context.Context, analytics2 *analytics.TiltAnalytics, subcommand model.TiltSubcommand) (dpDeps, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return dpDeps{}, err
	}
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return dpDeps{}, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	client := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	runtime := k8s.ProvideContainerRuntime(ctx, client)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return dpDeps{}, err
	}
	switchCli := docker.ProvideSwitchCli(clusterClient, localClient)
	extension := k8scontext.NewExtension(kubeContext, env)
	tiltBuild := provideTiltInfo()
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	webHost := provideWebHost()
	webPort := provideWebPort()
	localexecEnv := localexec.DefaultEnv(webPort, webHost)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(analytics2, client, extension, versionExtension, configExtension, dockerComposeClient, webHost, localexecEnv, defaults, env)
	cliDpDeps := newDPDeps(switchCli, tiltfileLoader)
	return cliDpDeps, nil
}

func wireCmdUp(ctx context.Context, analytics3 *analytics.TiltAnalytics, cmdTags analytics2.CmdTags, subcommand model.TiltSubcommand) (CmdUpDeps, error) {
	reducer := _wireReducerValue
	storeLogActionsFlag := provideLogActions()
	storeStore := store.NewStore(reducer, storeLogActionsFlag)
	tiltDevDir, err := dirs.UseTiltDevDir()
	if err != nil {
		return CmdUpDeps{}, err
	}
	configAccess := server.ProvideConfigAccess(tiltDevDir)
	webPort := provideWebPort()
	apiServerName := model.ProvideAPIServerName(webPort)
	webHost := provideWebHost()
	webListener, err := server.ProvideWebListener(webHost, webPort)
	if err != nil {
		return CmdUpDeps{}, err
	}
	tiltBuild := provideTiltInfo()
	connProvider := server.ProvideMemConn()
	bearerToken, err := server.NewBearerToken()
	if err != nil {
		return CmdUpDeps{}, err
	}
	generatableKeyCert := server.ProvideKeyCert()
	apiServerPort, err := server.ProvideAPIServerPort()
	if err != nil {
		return CmdUpDeps{}, err
	}
	apiserverConfig, err := server.ProvideTiltServerOptions(ctx, tiltBuild, connProvider, bearerToken, generatableKeyCert, apiServerPort)
	if err != nil {
		return CmdUpDeps{}, err
	}
	webMode, err := provideWebMode(tiltBuild)
	if err != nil {
		return CmdUpDeps{}, err
	}
	webVersion := provideWebVersion(tiltBuild)
	assetsServer, err := provideAssetServer(webMode, webVersion)
	if err != nil {
		return CmdUpDeps{}, err
	}
	httpClient := cloud.ProvideHttpClient()
	address := cloudurl.ProvideAddress()
	snapshotUploader := cloud.NewSnapshotUploader(httpClient, address)
	websocketList := server.NewWebsocketList()
	deferredClient := controllers.ProvideDeferredClient()
	headsUpServer, err := server.ProvideHeadsUpServer(ctx, storeStore, assetsServer, analytics3, snapshotUploader, websocketList, deferredClient)
	if err != nil {
		return CmdUpDeps{}, err
	}
	webURL, err := provideWebURL(webHost, webPort)
	if err != nil {
		return CmdUpDeps{}, err
	}
	headsUpServerController := server.ProvideHeadsUpServerController(configAccess, apiServerName, webListener, apiserverConfig, headsUpServer, assetsServer, webURL)
	scheme := v1alpha1.NewScheme()
	uncachedObjects := controllers.ProvideUncachedObjects()
	tiltServerControllerManager, err := controllers.NewTiltServerControllerManager(apiserverConfig, scheme, deferredClient, uncachedObjects)
	if err != nil {
		return CmdUpDeps{}, err
	}
	watcherMaker := fsevent.ProvideWatcherMaker()
	timerMaker := fsevent.ProvideTimerMaker()
	controller := filewatch.NewController(deferredClient, storeStore, watcherMaker, timerMaker)
	env := localexec.DefaultEnv(webPort, webHost)
	execer := cmd.ProvideExecer(env)
	proberManager := cmd.ProvideProberManager()
	clock := clockwork.NewRealClock()
	cmdController := cmd.NewController(ctx, execer, proberManager, deferredClient, storeStore, clock, scheme)
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return CmdUpDeps{}, err
	}
	k8sEnv := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return CmdUpDeps{}, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	client := k8s.ProvideK8sClient(ctx, k8sEnv, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	podSource := podlogstream.NewPodSource(ctx, client, scheme)
	podlogstreamController := podlogstream.NewController(ctx, deferredClient, storeStore, client, podSource)
	ownerFetcher := k8s.ProvideOwnerFetcher(ctx, client)
	containerRestartDetector := kubernetesdiscovery.NewContainerRestartDetector()
	reconciler := kubernetesdiscovery.NewReconciler(deferredClient, client, ownerFetcher, containerRestartDetector, storeStore)
	runtime := k8s.ProvideContainerRuntime(ctx, client)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, k8sEnv, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, k8sEnv, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return CmdUpDeps{}, err
	}
	switchCli := docker.ProvideSwitchCli(clusterClient, localClient)
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(switchCli, labels)
	dockerBuilder := build.DefaultDockerBuilder(dockerImageBuilder)
	kubernetesapplyReconciler := kubernetesapply.NewReconciler(deferredClient, client, scheme, dockerBuilder, kubeContext, storeStore, namespace)
	uisessionReconciler := uisession.NewReconciler(deferredClient, websocketList)
	uiresourceReconciler := uiresource.NewReconciler(deferredClient, websocketList)
	uibuttonReconciler := uibutton.NewReconciler(deferredClient, websocketList)
	portforwardReconciler := portforward.NewReconciler(deferredClient, storeStore, client)
	k8scontextExtension := k8scontext.NewExtension(kubeContext, k8sEnv)
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(analytics3, client, k8scontextExtension, versionExtension, configExtension, dockerComposeClient, webHost, env, defaults, k8sEnv)
	buildSource := tiltfile2.NewBuildSource()
	engineMode := _wireEngineModeValue
	tiltfileReconciler := tiltfile2.NewReconciler(storeStore, tiltfileLoader, switchCli, deferredClient, scheme, buildSource, engineMode)
	extensionReconciler := extension.NewReconciler(deferredClient, scheme)
	base := xdg.NewTiltDevBase()
	extensionrepoReconciler, err := extensionrepo.NewReconciler(deferredClient, base)
	if err != nil {
		return CmdUpDeps{}, err
	}
	v := controllers.ProvideControllers(controller, cmdController, podlogstreamController, reconciler, kubernetesapplyReconciler, uisessionReconciler, uiresourceReconciler, uibuttonReconciler, portforwardReconciler, tiltfileReconciler, extensionReconciler, extensionrepoReconciler)
	controllerBuilder := controllers.NewControllerBuilder(tiltServerControllerManager, v)
	v2 := provideClock()
	renderer := hud.NewRenderer(v2)
	openURL := _wireOpenURLValue
	headsUpDisplay := hud.NewHud(renderer, webURL, analytics3, openURL)
	stdout := hud.ProvideStdout()
	incrementalPrinter := hud.NewIncrementalPrinter(stdout)
	terminalStream := hud.NewTerminalStream(incrementalPrinter, storeStore)
	openInput := _wireOpenInputValue
	terminalPrompt := prompt.NewTerminalPrompt(analytics3, openInput, openURL, stdout, webHost, webURL)
	serviceWatcher := k8swatch.NewServiceWatcher(client, ownerFetcher, namespace)
	dockerUpdater := containerupdate.NewDockerUpdater(switchCli)
	execUpdater := containerupdate.NewExecUpdater(client)
	buildcontrolUpdateModeFlag := provideUpdateModeFlag()
	updateMode, err := buildcontrol.ProvideUpdateMode(buildcontrolUpdateModeFlag, kubeContext, clusterEnv)
	if err != nil {
		return CmdUpDeps{}, err
	}
	buildClock := build.ProvideClock()
	liveUpdateBuildAndDeployer := buildcontrol.NewLiveUpdateBuildAndDeployer(dockerUpdater, execUpdater, updateMode, kubeContext, buildClock)
	execCustomBuilder := build.NewExecCustomBuilder(switchCli, buildClock)
	clusterName := k8s.ProvideClusterName(ctx, apiConfig)
	kindLoader := buildcontrol.NewKINDLoader(k8sEnv, clusterName)
	imageBuildAndDeployer := buildcontrol.NewImageBuildAndDeployer(dockerBuilder, execCustomBuilder, client, k8sEnv, kubeContext, analytics3, updateMode, buildClock, kindLoader, deferredClient, kubernetesapplyReconciler)
	imageBuilder := buildcontrol.NewImageBuilder(dockerBuilder, execCustomBuilder, updateMode)
	dockerComposeBuildAndDeployer := buildcontrol.NewDockerComposeBuildAndDeployer(dockerComposeClient, switchCli, imageBuilder, buildClock)
	localTargetBuildAndDeployer := buildcontrol.NewLocalTargetBuildAndDeployer(buildClock, deferredClient, cmdController)
	buildOrder := engine.DefaultBuildOrder(liveUpdateBuildAndDeployer, imageBuildAndDeployer, dockerComposeBuildAndDeployer, localTargetBuildAndDeployer, updateMode, k8sEnv, runtime)
	spanCollector := tracer.NewSpanCollector(ctx)
	traceTracer, err := tracer.InitOpenTelemetry(ctx, spanCollector)
	if err != nil {
		return CmdUpDeps{}, err
	}
	compositeBuildAndDeployer := engine.NewCompositeBuildAndDeployer(buildOrder, traceTracer)
	buildController := engine.NewBuildController(compositeBuildAndDeployer)
	configsController := configs.NewConfigsController(deferredClient, buildSource)
	eventWatcher := dcwatch.NewEventWatcher(dockerComposeClient, localClient)
	dockerComposeLogManager := runtimelog.NewDockerComposeLogManager(dockerComposeClient)
	analyticsReporter := analytics2.ProvideAnalyticsReporter(analytics3, storeStore, client, k8sEnv)
	analyticsUpdater := analytics2.NewAnalyticsUpdater(analytics3, cmdTags, engineMode)
	eventWatchManager := k8swatch.NewEventWatchManager(client, ownerFetcher, namespace)
	cloudStatusManager := cloud.NewStatusManager(httpClient, clock)
	dockerPruner := dockerprune.NewDockerPruner(switchCli)
	telemetryController := telemetry.NewController(buildClock, spanCollector)
	serverController := local.NewServerController(deferredClient)
	podMonitor := k8srollout.NewPodMonitor()
	sessionController := session.NewController(deferredClient, engineMode)
	deferredExporter := ProvideDeferredExporter()
	gitRemote := git.ProvideGitRemote()
	metricsController := metrics.NewController(deferredExporter, tiltBuild, gitRemote)
	subscriber := uisession2.NewSubscriber(deferredClient)
	uiresourceSubscriber := uiresource2.NewSubscriber(deferredClient)
	v3 := engine.ProvideSubscribers(headsUpServerController, tiltServerControllerManager, controllerBuilder, headsUpDisplay, terminalStream, terminalPrompt, serviceWatcher, buildController, configsController, eventWatcher, dockerComposeLogManager, analyticsReporter, analyticsUpdater, eventWatchManager, cloudStatusManager, dockerPruner, telemetryController, serverController, podMonitor, sessionController, metricsController, subscriber, uiresourceSubscriber)
	upper, err := engine.NewUpper(ctx, storeStore, v3)
	if err != nil {
		return CmdUpDeps{}, err
	}
	tokenToken, err := token.GetOrCreateToken(tiltDevDir)
	if err != nil {
		return CmdUpDeps{}, err
	}
	snapshotter := cloud.NewSnapshotter(storeStore, deferredClient)
	cmdUpDeps := CmdUpDeps{
		Upper:        upper,
		TiltBuild:    tiltBuild,
		Token:        tokenToken,
		CloudAddress: address,
		Prompt:       terminalPrompt,
		Snapshotter:  snapshotter,
	}
	return cmdUpDeps, nil
}

var (
	_wireReducerValue    = engine.UpperReducer
	_wireLabelsValue     = dockerfile.Labels{}
	_wireEngineModeValue = store.EngineModeUp
	_wireOpenURLValue    = openurl.OpenURL(openurl.BrowserOpen)
	_wireOpenInputValue  = prompt.OpenInput(prompt.TTYOpen)
)

func wireCmdCI(ctx context.Context, analytics3 *analytics.TiltAnalytics, subcommand model.TiltSubcommand) (CmdCIDeps, error) {
	reducer := _wireReducerValue
	storeLogActionsFlag := provideLogActions()
	storeStore := store.NewStore(reducer, storeLogActionsFlag)
	tiltDevDir, err := dirs.UseTiltDevDir()
	if err != nil {
		return CmdCIDeps{}, err
	}
	configAccess := server.ProvideConfigAccess(tiltDevDir)
	webPort := provideWebPort()
	apiServerName := model.ProvideAPIServerName(webPort)
	webHost := provideWebHost()
	webListener, err := server.ProvideWebListener(webHost, webPort)
	if err != nil {
		return CmdCIDeps{}, err
	}
	tiltBuild := provideTiltInfo()
	connProvider := server.ProvideMemConn()
	bearerToken, err := server.NewBearerToken()
	if err != nil {
		return CmdCIDeps{}, err
	}
	generatableKeyCert := server.ProvideKeyCert()
	apiServerPort, err := server.ProvideAPIServerPort()
	if err != nil {
		return CmdCIDeps{}, err
	}
	apiserverConfig, err := server.ProvideTiltServerOptions(ctx, tiltBuild, connProvider, bearerToken, generatableKeyCert, apiServerPort)
	if err != nil {
		return CmdCIDeps{}, err
	}
	webMode, err := provideWebMode(tiltBuild)
	if err != nil {
		return CmdCIDeps{}, err
	}
	webVersion := provideWebVersion(tiltBuild)
	assetsServer, err := provideAssetServer(webMode, webVersion)
	if err != nil {
		return CmdCIDeps{}, err
	}
	httpClient := cloud.ProvideHttpClient()
	address := cloudurl.ProvideAddress()
	snapshotUploader := cloud.NewSnapshotUploader(httpClient, address)
	websocketList := server.NewWebsocketList()
	deferredClient := controllers.ProvideDeferredClient()
	headsUpServer, err := server.ProvideHeadsUpServer(ctx, storeStore, assetsServer, analytics3, snapshotUploader, websocketList, deferredClient)
	if err != nil {
		return CmdCIDeps{}, err
	}
	webURL, err := provideWebURL(webHost, webPort)
	if err != nil {
		return CmdCIDeps{}, err
	}
	headsUpServerController := server.ProvideHeadsUpServerController(configAccess, apiServerName, webListener, apiserverConfig, headsUpServer, assetsServer, webURL)
	scheme := v1alpha1.NewScheme()
	uncachedObjects := controllers.ProvideUncachedObjects()
	tiltServerControllerManager, err := controllers.NewTiltServerControllerManager(apiserverConfig, scheme, deferredClient, uncachedObjects)
	if err != nil {
		return CmdCIDeps{}, err
	}
	watcherMaker := fsevent.ProvideWatcherMaker()
	timerMaker := fsevent.ProvideTimerMaker()
	controller := filewatch.NewController(deferredClient, storeStore, watcherMaker, timerMaker)
	env := localexec.DefaultEnv(webPort, webHost)
	execer := cmd.ProvideExecer(env)
	proberManager := cmd.ProvideProberManager()
	clock := clockwork.NewRealClock()
	cmdController := cmd.NewController(ctx, execer, proberManager, deferredClient, storeStore, clock, scheme)
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return CmdCIDeps{}, err
	}
	k8sEnv := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return CmdCIDeps{}, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	client := k8s.ProvideK8sClient(ctx, k8sEnv, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	podSource := podlogstream.NewPodSource(ctx, client, scheme)
	podlogstreamController := podlogstream.NewController(ctx, deferredClient, storeStore, client, podSource)
	ownerFetcher := k8s.ProvideOwnerFetcher(ctx, client)
	containerRestartDetector := kubernetesdiscovery.NewContainerRestartDetector()
	reconciler := kubernetesdiscovery.NewReconciler(deferredClient, client, ownerFetcher, containerRestartDetector, storeStore)
	runtime := k8s.ProvideContainerRuntime(ctx, client)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, k8sEnv, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, k8sEnv, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return CmdCIDeps{}, err
	}
	switchCli := docker.ProvideSwitchCli(clusterClient, localClient)
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(switchCli, labels)
	dockerBuilder := build.DefaultDockerBuilder(dockerImageBuilder)
	kubernetesapplyReconciler := kubernetesapply.NewReconciler(deferredClient, client, scheme, dockerBuilder, kubeContext, storeStore, namespace)
	uisessionReconciler := uisession.NewReconciler(deferredClient, websocketList)
	uiresourceReconciler := uiresource.NewReconciler(deferredClient, websocketList)
	uibuttonReconciler := uibutton.NewReconciler(deferredClient, websocketList)
	portforwardReconciler := portforward.NewReconciler(deferredClient, storeStore, client)
	k8scontextExtension := k8scontext.NewExtension(kubeContext, k8sEnv)
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(analytics3, client, k8scontextExtension, versionExtension, configExtension, dockerComposeClient, webHost, env, defaults, k8sEnv)
	buildSource := tiltfile2.NewBuildSource()
	engineMode := _wireStoreEngineModeValue
	tiltfileReconciler := tiltfile2.NewReconciler(storeStore, tiltfileLoader, switchCli, deferredClient, scheme, buildSource, engineMode)
	extensionReconciler := extension.NewReconciler(deferredClient, scheme)
	base := xdg.NewTiltDevBase()
	extensionrepoReconciler, err := extensionrepo.NewReconciler(deferredClient, base)
	if err != nil {
		return CmdCIDeps{}, err
	}
	v := controllers.ProvideControllers(controller, cmdController, podlogstreamController, reconciler, kubernetesapplyReconciler, uisessionReconciler, uiresourceReconciler, uibuttonReconciler, portforwardReconciler, tiltfileReconciler, extensionReconciler, extensionrepoReconciler)
	controllerBuilder := controllers.NewControllerBuilder(tiltServerControllerManager, v)
	v2 := provideClock()
	renderer := hud.NewRenderer(v2)
	openURL := _wireOpenURLValue
	headsUpDisplay := hud.NewHud(renderer, webURL, analytics3, openURL)
	stdout := hud.ProvideStdout()
	incrementalPrinter := hud.NewIncrementalPrinter(stdout)
	terminalStream := hud.NewTerminalStream(incrementalPrinter, storeStore)
	openInput := _wireOpenInputValue
	terminalPrompt := prompt.NewTerminalPrompt(analytics3, openInput, openURL, stdout, webHost, webURL)
	serviceWatcher := k8swatch.NewServiceWatcher(client, ownerFetcher, namespace)
	dockerUpdater := containerupdate.NewDockerUpdater(switchCli)
	execUpdater := containerupdate.NewExecUpdater(client)
	buildcontrolUpdateModeFlag := provideUpdateModeFlag()
	updateMode, err := buildcontrol.ProvideUpdateMode(buildcontrolUpdateModeFlag, kubeContext, clusterEnv)
	if err != nil {
		return CmdCIDeps{}, err
	}
	buildClock := build.ProvideClock()
	liveUpdateBuildAndDeployer := buildcontrol.NewLiveUpdateBuildAndDeployer(dockerUpdater, execUpdater, updateMode, kubeContext, buildClock)
	execCustomBuilder := build.NewExecCustomBuilder(switchCli, buildClock)
	clusterName := k8s.ProvideClusterName(ctx, apiConfig)
	kindLoader := buildcontrol.NewKINDLoader(k8sEnv, clusterName)
	imageBuildAndDeployer := buildcontrol.NewImageBuildAndDeployer(dockerBuilder, execCustomBuilder, client, k8sEnv, kubeContext, analytics3, updateMode, buildClock, kindLoader, deferredClient, kubernetesapplyReconciler)
	imageBuilder := buildcontrol.NewImageBuilder(dockerBuilder, execCustomBuilder, updateMode)
	dockerComposeBuildAndDeployer := buildcontrol.NewDockerComposeBuildAndDeployer(dockerComposeClient, switchCli, imageBuilder, buildClock)
	localTargetBuildAndDeployer := buildcontrol.NewLocalTargetBuildAndDeployer(buildClock, deferredClient, cmdController)
	buildOrder := engine.DefaultBuildOrder(liveUpdateBuildAndDeployer, imageBuildAndDeployer, dockerComposeBuildAndDeployer, localTargetBuildAndDeployer, updateMode, k8sEnv, runtime)
	spanCollector := tracer.NewSpanCollector(ctx)
	traceTracer, err := tracer.InitOpenTelemetry(ctx, spanCollector)
	if err != nil {
		return CmdCIDeps{}, err
	}
	compositeBuildAndDeployer := engine.NewCompositeBuildAndDeployer(buildOrder, traceTracer)
	buildController := engine.NewBuildController(compositeBuildAndDeployer)
	configsController := configs.NewConfigsController(deferredClient, buildSource)
	eventWatcher := dcwatch.NewEventWatcher(dockerComposeClient, localClient)
	dockerComposeLogManager := runtimelog.NewDockerComposeLogManager(dockerComposeClient)
	analyticsReporter := analytics2.ProvideAnalyticsReporter(analytics3, storeStore, client, k8sEnv)
	cmdTags := _wireCmdTagsValue
	analyticsUpdater := analytics2.NewAnalyticsUpdater(analytics3, cmdTags, engineMode)
	eventWatchManager := k8swatch.NewEventWatchManager(client, ownerFetcher, namespace)
	cloudStatusManager := cloud.NewStatusManager(httpClient, clock)
	dockerPruner := dockerprune.NewDockerPruner(switchCli)
	telemetryController := telemetry.NewController(buildClock, spanCollector)
	serverController := local.NewServerController(deferredClient)
	podMonitor := k8srollout.NewPodMonitor()
	sessionController := session.NewController(deferredClient, engineMode)
	deferredExporter := ProvideDeferredExporter()
	gitRemote := git.ProvideGitRemote()
	metricsController := metrics.NewController(deferredExporter, tiltBuild, gitRemote)
	subscriber := uisession2.NewSubscriber(deferredClient)
	uiresourceSubscriber := uiresource2.NewSubscriber(deferredClient)
	v3 := engine.ProvideSubscribers(headsUpServerController, tiltServerControllerManager, controllerBuilder, headsUpDisplay, terminalStream, terminalPrompt, serviceWatcher, buildController, configsController, eventWatcher, dockerComposeLogManager, analyticsReporter, analyticsUpdater, eventWatchManager, cloudStatusManager, dockerPruner, telemetryController, serverController, podMonitor, sessionController, metricsController, subscriber, uiresourceSubscriber)
	upper, err := engine.NewUpper(ctx, storeStore, v3)
	if err != nil {
		return CmdCIDeps{}, err
	}
	tokenToken, err := token.GetOrCreateToken(tiltDevDir)
	if err != nil {
		return CmdCIDeps{}, err
	}
	snapshotter := cloud.NewSnapshotter(storeStore, deferredClient)
	cmdCIDeps := CmdCIDeps{
		Upper:        upper,
		TiltBuild:    tiltBuild,
		Token:        tokenToken,
		CloudAddress: address,
		Snapshotter:  snapshotter,
	}
	return cmdCIDeps, nil
}

var (
	_wireStoreEngineModeValue = store.EngineModeCI
	_wireCmdTagsValue         = analytics2.CmdTags(map[string]string{})
)

func wireCmdUpdog(ctx context.Context, analytics3 *analytics.TiltAnalytics, cmdTags analytics2.CmdTags, subcommand model.TiltSubcommand, objects []client.Object) (CmdUpdogDeps, error) {
	reducer := _wireReducerValue
	storeLogActionsFlag := provideLogActions()
	storeStore := store.NewStore(reducer, storeLogActionsFlag)
	tiltDevDir, err := dirs.UseTiltDevDir()
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	configAccess := server.ProvideConfigAccess(tiltDevDir)
	webPort := provideWebPort()
	apiServerName := model.ProvideAPIServerName(webPort)
	webHost := provideWebHost()
	webListener, err := server.ProvideWebListener(webHost, webPort)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	tiltBuild := provideTiltInfo()
	connProvider := server.ProvideMemConn()
	bearerToken, err := server.NewBearerToken()
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	generatableKeyCert := server.ProvideKeyCert()
	apiServerPort, err := server.ProvideAPIServerPort()
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	apiserverConfig, err := server.ProvideTiltServerOptions(ctx, tiltBuild, connProvider, bearerToken, generatableKeyCert, apiServerPort)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	webMode, err := provideWebMode(tiltBuild)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	webVersion := provideWebVersion(tiltBuild)
	assetsServer, err := provideAssetServer(webMode, webVersion)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	httpClient := cloud.ProvideHttpClient()
	address := cloudurl.ProvideAddress()
	snapshotUploader := cloud.NewSnapshotUploader(httpClient, address)
	websocketList := server.NewWebsocketList()
	deferredClient := controllers.ProvideDeferredClient()
	headsUpServer, err := server.ProvideHeadsUpServer(ctx, storeStore, assetsServer, analytics3, snapshotUploader, websocketList, deferredClient)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	webURL, err := provideWebURL(webHost, webPort)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	headsUpServerController := server.ProvideHeadsUpServerController(configAccess, apiServerName, webListener, apiserverConfig, headsUpServer, assetsServer, webURL)
	scheme := v1alpha1.NewScheme()
	uncachedObjects := controllers.ProvideUncachedObjects()
	tiltServerControllerManager, err := controllers.NewTiltServerControllerManager(apiserverConfig, scheme, deferredClient, uncachedObjects)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	watcherMaker := fsevent.ProvideWatcherMaker()
	timerMaker := fsevent.ProvideTimerMaker()
	controller := filewatch.NewController(deferredClient, storeStore, watcherMaker, timerMaker)
	env := localexec.DefaultEnv(webPort, webHost)
	execer := cmd.ProvideExecer(env)
	proberManager := cmd.ProvideProberManager()
	clock := clockwork.NewRealClock()
	cmdController := cmd.NewController(ctx, execer, proberManager, deferredClient, storeStore, clock, scheme)
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	k8sEnv := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, k8sEnv, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	podSource := podlogstream.NewPodSource(ctx, k8sClient, scheme)
	podlogstreamController := podlogstream.NewController(ctx, deferredClient, storeStore, k8sClient, podSource)
	ownerFetcher := k8s.ProvideOwnerFetcher(ctx, k8sClient)
	containerRestartDetector := kubernetesdiscovery.NewContainerRestartDetector()
	reconciler := kubernetesdiscovery.NewReconciler(deferredClient, k8sClient, ownerFetcher, containerRestartDetector, storeStore)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, k8sEnv, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, k8sEnv, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	switchCli := docker.ProvideSwitchCli(clusterClient, localClient)
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(switchCli, labels)
	dockerBuilder := build.DefaultDockerBuilder(dockerImageBuilder)
	kubernetesapplyReconciler := kubernetesapply.NewReconciler(deferredClient, k8sClient, scheme, dockerBuilder, kubeContext, storeStore, namespace)
	uisessionReconciler := uisession.NewReconciler(deferredClient, websocketList)
	uiresourceReconciler := uiresource.NewReconciler(deferredClient, websocketList)
	uibuttonReconciler := uibutton.NewReconciler(deferredClient, websocketList)
	portforwardReconciler := portforward.NewReconciler(deferredClient, storeStore, k8sClient)
	k8scontextExtension := k8scontext.NewExtension(kubeContext, k8sEnv)
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(analytics3, k8sClient, k8scontextExtension, versionExtension, configExtension, dockerComposeClient, webHost, env, defaults, k8sEnv)
	buildSource := tiltfile2.NewBuildSource()
	engineMode := _wireEngineModeValue2
	tiltfileReconciler := tiltfile2.NewReconciler(storeStore, tiltfileLoader, switchCli, deferredClient, scheme, buildSource, engineMode)
	extensionReconciler := extension.NewReconciler(deferredClient, scheme)
	base := xdg.NewTiltDevBase()
	extensionrepoReconciler, err := extensionrepo.NewReconciler(deferredClient, base)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	v := controllers.ProvideControllers(controller, cmdController, podlogstreamController, reconciler, kubernetesapplyReconciler, uisessionReconciler, uiresourceReconciler, uibuttonReconciler, portforwardReconciler, tiltfileReconciler, extensionReconciler, extensionrepoReconciler)
	controllerBuilder := controllers.NewControllerBuilder(tiltServerControllerManager, v)
	stdout := hud.ProvideStdout()
	incrementalPrinter := hud.NewIncrementalPrinter(stdout)
	terminalStream := hud.NewTerminalStream(incrementalPrinter, storeStore)
	cliUpdogSubscriber := provideUpdogSubscriber(objects, deferredClient)
	v2 := provideUpdogCmdSubscribers(headsUpServerController, tiltServerControllerManager, controllerBuilder, terminalStream, cliUpdogSubscriber)
	upper, err := engine.NewUpper(ctx, storeStore, v2)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	tokenToken, err := token.GetOrCreateToken(tiltDevDir)
	if err != nil {
		return CmdUpdogDeps{}, err
	}
	cmdUpdogDeps := CmdUpdogDeps{
		Upper:        upper,
		TiltBuild:    tiltBuild,
		Token:        tokenToken,
		CloudAddress: address,
		Store:        storeStore,
	}
	return cmdUpdogDeps, nil
}

var (
	_wireEngineModeValue2 = store.EngineModeCI
)

func wireKubeContext(ctx context.Context) (k8s.KubeContext, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return "", err
	}
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return "", err
	}
	return kubeContext, nil
}

func wireKubeConfig(ctx context.Context) (*api.Config, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return nil, err
	}
	return apiConfig, nil
}

func wireEnv(ctx context.Context) (k8s.Env, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return "", err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	return env, nil
}

func wireNamespace(ctx context.Context) (k8s.Namespace, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	return namespace, nil
}

func wireClusterName(ctx context.Context) (k8s.ClusterName, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return "", err
	}
	clusterName := k8s.ProvideClusterName(ctx, apiConfig)
	return clusterName, nil
}

func wireRuntime(ctx context.Context) (container.Runtime, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return "", err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return "", err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	return runtime, nil
}

func wireK8sClient(ctx context.Context) (k8s.Client, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return nil, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return nil, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	return k8sClient, nil
}

func wireK8sVersion(ctx context.Context) (*version2.Info, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	info, err := k8s.ProvideServerVersion(clientsetOrError)
	if err != nil {
		return nil, err
	}
	return info, nil
}

func wireDockerClusterClient(ctx context.Context) (docker.ClusterClient, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return nil, err
	}
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return nil, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return nil, err
	}
	return clusterClient, nil
}

func wireDockerLocalClient(ctx context.Context) (docker.LocalClient, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return nil, err
	}
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return nil, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	return localClient, nil
}

func wireDownDeps(ctx context.Context, tiltAnalytics *analytics.TiltAnalytics, subcommand model.TiltSubcommand) (DownDeps, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return DownDeps{}, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return DownDeps{}, err
	}
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	k8scontextExtension := k8scontext.NewExtension(kubeContext, env)
	tiltBuild := provideTiltInfo()
	versionExtension := version.NewExtension(tiltBuild)
	configExtension := config.NewExtension(subcommand)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	dockerComposeClient := dockercompose.NewDockerComposeClient(localEnv)
	webHost := provideWebHost()
	webPort := provideWebPort()
	localexecEnv := localexec.DefaultEnv(webPort, webHost)
	defaults := _wireDefaultsValue
	tiltfileLoader := tiltfile.ProvideTiltfileLoader(tiltAnalytics, k8sClient, k8scontextExtension, versionExtension, configExtension, dockerComposeClient, webHost, localexecEnv, defaults, env)
	downDeps := ProvideDownDeps(tiltfileLoader, dockerComposeClient, k8sClient)
	return downDeps, nil
}

func wireLogsDeps(ctx context.Context, tiltAnalytics *analytics.TiltAnalytics, subcommand model.TiltSubcommand) (LogsDeps, error) {
	webHost := provideWebHost()
	webPort := provideWebPort()
	webURL, err := provideWebURL(webHost, webPort)
	if err != nil {
		return LogsDeps{}, err
	}
	stdout := hud.ProvideStdout()
	incrementalPrinter := hud.NewIncrementalPrinter(stdout)
	logsDeps := ProvideLogsDeps(webURL, incrementalPrinter)
	return logsDeps, nil
}

func wireDumpImageDeployRefDeps(ctx context.Context) (DumpImageDeployRefDeps, error) {
	k8sKubeContextOverride := ProvideKubeContextOverride()
	k8sNamespaceOverride := ProvideNamespaceOverride()
	clientConfig := k8s.ProvideClientConfig(k8sKubeContextOverride, k8sNamespaceOverride)
	apiConfig, err := k8s.ProvideKubeConfig(clientConfig, k8sKubeContextOverride)
	if err != nil {
		return DumpImageDeployRefDeps{}, err
	}
	kubeContext, err := k8s.ProvideKubeContext(apiConfig)
	if err != nil {
		return DumpImageDeployRefDeps{}, err
	}
	env := k8s.ProvideEnv(ctx, apiConfig)
	restConfigOrError := k8s.ProvideRESTConfig(clientConfig)
	clientsetOrError := k8s.ProvideClientset(restConfigOrError)
	portForwardClient := k8s.ProvidePortForwardClient(restConfigOrError, clientsetOrError)
	namespace := k8s.ProvideConfigNamespace(clientConfig)
	minikubeClient := k8s.ProvideMinikubeClient(kubeContext)
	k8sClient := k8s.ProvideK8sClient(ctx, env, restConfigOrError, clientsetOrError, portForwardClient, namespace, minikubeClient, clientConfig)
	runtime := k8s.ProvideContainerRuntime(ctx, k8sClient)
	clusterEnv := docker.ProvideClusterEnv(ctx, kubeContext, env, runtime, minikubeClient)
	localEnv := docker.ProvideLocalEnv(ctx, kubeContext, env, clusterEnv)
	localClient := docker.ProvideLocalCli(ctx, localEnv)
	clusterClient, err := docker.ProvideClusterCli(ctx, localEnv, clusterEnv, localClient)
	if err != nil {
		return DumpImageDeployRefDeps{}, err
	}
	switchCli := docker.ProvideSwitchCli(clusterClient, localClient)
	labels := _wireLabelsValue
	dockerImageBuilder := build.NewDockerImageBuilder(switchCli, labels)
	dockerBuilder := build.DefaultDockerBuilder(dockerImageBuilder)
	dumpImageDeployRefDeps := DumpImageDeployRefDeps{
		DockerBuilder: dockerBuilder,
		DockerClient:  switchCli,
	}
	return dumpImageDeployRefDeps, nil
}

func wireAnalytics(l logger.Logger, cmdName model.TiltSubcommand) (*analytics.TiltAnalytics, error) {
	tiltBuild := provideTiltInfo()
	gitRemote := git.ProvideGitRemote()
	tiltAnalytics, err := newAnalytics(l, cmdName, tiltBuild, gitRemote)
	if err != nil {
		return nil, err
	}
	return tiltAnalytics, nil
}

func wireClientGetter(ctx context.Context) (*client2.Getter, error) {
	tiltDevDir, err := dirs.UseTiltDevDir()
	if err != nil {
		return nil, err
	}
	webPort := provideWebPort()
	apiServerName := model.ProvideAPIServerName(webPort)
	configAccess := server.ProvideConfigAccess(tiltDevDir)
	tiltClientConfig, err := client2.ProvideClientConfig(apiServerName, configAccess)
	if err != nil {
		return nil, err
	}
	getter := client2.NewGetter(tiltDevDir, tiltClientConfig)
	return getter, nil
}

// wire.go:

var K8sWireSet = wire.NewSet(k8s.ProvideEnv, k8s.ProvideClusterName, k8s.ProvideKubeContext, k8s.ProvideKubeConfig, k8s.ProvideClientConfig, k8s.ProvideClientset, k8s.ProvideRESTConfig, k8s.ProvidePortForwardClient, k8s.ProvideConfigNamespace, k8s.ProvideContainerRuntime, k8s.ProvideServerVersion, k8s.ProvideK8sClient, k8s.ProvideOwnerFetcher, ProvideKubeContextOverride,
	ProvideNamespaceOverride)

var BaseWireSet = wire.NewSet(
	K8sWireSet, tiltfile.WireSet, git.ProvideGitRemote, localexec.DefaultEnv, docker.SwitchWireSet, ProvideDeferredExporter, metrics.WireSet, user.WireSet, dockercompose.NewDockerComposeClient, clockwork.NewRealClock, engine.DeployerWireSet, engine.NewBuildController, local.NewServerController, kubernetesdiscovery.NewContainerRestartDetector, k8swatch.NewServiceWatcher, k8swatch.NewEventWatchManager, uisession2.NewSubscriber, uiresource2.NewSubscriber, configs.NewConfigsController, telemetry.NewController, dcwatch.NewEventWatcher, runtimelog.NewDockerComposeLogManager, cloud.WireSet, cloudurl.ProvideAddress, k8srollout.NewPodMonitor, telemetry.NewStartTracker, session.NewController, build.ProvideClock, provideClock, hud.WireSet, prompt.WireSet, wire.Value(openurl.OpenURL(openurl.BrowserOpen)), provideLogActions, store.NewStore, wire.Bind(new(store.RStore), new(*store.Store)), dockerprune.NewDockerPruner, provideTiltInfo, engine.NewUpper, analytics2.NewAnalyticsUpdater, analytics2.ProvideAnalyticsReporter, provideUpdateModeFlag, fsevent.ProvideWatcherMaker, fsevent.ProvideTimerMaker, controllers.WireSet, provideWebVersion,
	provideWebMode,
	provideWebURL,
	provideWebPort,
	provideWebHost, server.WireSet, provideAssetServer, tracer.NewSpanCollector, wire.Bind(new(trace.SpanProcessor), new(*tracer.SpanCollector)), wire.Bind(new(tracer.SpanSource), new(*tracer.SpanCollector)), dirs.UseTiltDevDir, xdg.NewTiltDevBase, token.GetOrCreateToken, buildcontrol.NewKINDLoader, wire.Value(feature.MainDefaults),
)

var CLIClientWireSet = wire.NewSet(
	BaseWireSet, client2.WireSet,
)

var UpWireSet = wire.NewSet(
	BaseWireSet, engine.ProvideSubscribers,
)

type CmdUpDeps struct {
	Upper        engine.Upper
	TiltBuild    model.TiltBuild
	Token        token.Token
	CloudAddress cloudurl.Address
	Prompt       *prompt.TerminalPrompt
	Snapshotter  *cloud.Snapshotter
}

type CmdCIDeps struct {
	Upper        engine.Upper
	TiltBuild    model.TiltBuild
	Token        token.Token
	CloudAddress cloudurl.Address
	Snapshotter  *cloud.Snapshotter
}

type CmdUpdogDeps struct {
	Upper        engine.Upper
	TiltBuild    model.TiltBuild
	Token        token.Token
	CloudAddress cloudurl.Address
	Store        *store.Store
}

type DownDeps struct {
	tfl      tiltfile.TiltfileLoader
	dcClient dockercompose.DockerComposeClient
	kClient  k8s.Client
}

func ProvideDownDeps(
	tfl tiltfile.TiltfileLoader,
	dcClient dockercompose.DockerComposeClient,
	kClient k8s.Client) DownDeps {
	return DownDeps{
		tfl:      tfl,
		dcClient: dcClient,
		kClient:  kClient,
	}
}

type LogsDeps struct {
	url     model.WebURL
	printer *hud.IncrementalPrinter
}

func ProvideLogsDeps(u model.WebURL, p *hud.IncrementalPrinter) LogsDeps {
	return LogsDeps{
		url:     u,
		printer: p,
	}
}

func provideClock() func() time.Time {
	return time.Now
}

type DumpImageDeployRefDeps struct {
	DockerBuilder build.DockerBuilder
	DockerClient  docker.Client
}

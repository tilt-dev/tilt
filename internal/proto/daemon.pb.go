// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/proto/daemon.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	internal/proto/daemon.proto

It has these top-level messages:
	Service
	Cmd
	Mount
	Repo
	GitRepo
	CreateServiceReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Service struct {
	K8SYaml        string   `protobuf:"bytes,1,opt,name=k8s_yaml,json=k8sYaml" json:"k8s_yaml,omitempty"`
	DockerfileText string   `protobuf:"bytes,2,opt,name=dockerfile_text,json=dockerfileText" json:"dockerfile_text,omitempty"`
	Mounts         []*Mount `protobuf:"bytes,3,rep,name=mounts" json:"mounts,omitempty"`
	Steps          []*Cmd   `protobuf:"bytes,4,rep,name=steps" json:"steps,omitempty"`
	DockerfileTag  string   `protobuf:"bytes,5,opt,name=dockerfile_tag,json=dockerfileTag" json:"dockerfile_tag,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto1.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetK8SYaml() string {
	if m != nil {
		return m.K8SYaml
	}
	return ""
}

func (m *Service) GetDockerfileText() string {
	if m != nil {
		return m.DockerfileText
	}
	return ""
}

func (m *Service) GetMounts() []*Mount {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Service) GetSteps() []*Cmd {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Service) GetDockerfileTag() string {
	if m != nil {
		return m.DockerfileTag
	}
	return ""
}

type Cmd struct {
	Argv []string `protobuf:"bytes,1,rep,name=argv" json:"argv,omitempty"`
}

func (m *Cmd) Reset()                    { *m = Cmd{} }
func (m *Cmd) String() string            { return proto1.CompactTextString(m) }
func (*Cmd) ProtoMessage()               {}
func (*Cmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cmd) GetArgv() []string {
	if m != nil {
		return m.Argv
	}
	return nil
}

type Mount struct {
	Repo          *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,json=containerPath" json:"container_path,omitempty"`
}

func (m *Mount) Reset()                    { *m = Mount{} }
func (m *Mount) String() string            { return proto1.CompactTextString(m) }
func (*Mount) ProtoMessage()               {}
func (*Mount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Mount) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *Mount) GetContainerPath() string {
	if m != nil {
		return m.ContainerPath
	}
	return ""
}

type Repo struct {
	// Types that are valid to be assigned to RepoType:
	//	*Repo_GitRepo
	RepoType isRepo_RepoType `protobuf_oneof:"repo_type"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto1.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isRepo_RepoType interface{ isRepo_RepoType() }

type Repo_GitRepo struct {
	GitRepo *GitRepo `protobuf:"bytes,1,opt,name=git_repo,json=gitRepo,oneof"`
}

func (*Repo_GitRepo) isRepo_RepoType() {}

func (m *Repo) GetRepoType() isRepo_RepoType {
	if m != nil {
		return m.RepoType
	}
	return nil
}

func (m *Repo) GetGitRepo() *GitRepo {
	if x, ok := m.GetRepoType().(*Repo_GitRepo); ok {
		return x.GitRepo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Repo) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Repo_OneofMarshaler, _Repo_OneofUnmarshaler, _Repo_OneofSizer, []interface{}{
		(*Repo_GitRepo)(nil),
	}
}

func _Repo_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Repo)
	// repo_type
	switch x := m.RepoType.(type) {
	case *Repo_GitRepo:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.GitRepo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Repo.RepoType has unexpected type %T", x)
	}
	return nil
}

func _Repo_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Repo)
	switch tag {
	case 1: // repo_type.git_repo
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GitRepo)
		err := b.DecodeMessage(msg)
		m.RepoType = &Repo_GitRepo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Repo_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Repo)
	// repo_type
	switch x := m.RepoType.(type) {
	case *Repo_GitRepo:
		s := proto1.Size(x.GitRepo)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GitRepo struct {
	LocalPath string `protobuf:"bytes,1,opt,name=local_path,json=localPath" json:"local_path,omitempty"`
}

func (m *GitRepo) Reset()                    { *m = GitRepo{} }
func (m *GitRepo) String() string            { return proto1.CompactTextString(m) }
func (*GitRepo) ProtoMessage()               {}
func (*GitRepo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GitRepo) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

type CreateServiceReply struct {
}

func (m *CreateServiceReply) Reset()                    { *m = CreateServiceReply{} }
func (m *CreateServiceReply) String() string            { return proto1.CompactTextString(m) }
func (*CreateServiceReply) ProtoMessage()               {}
func (*CreateServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto1.RegisterType((*Service)(nil), "daemon.Service")
	proto1.RegisterType((*Cmd)(nil), "daemon.Cmd")
	proto1.RegisterType((*Mount)(nil), "daemon.Mount")
	proto1.RegisterType((*Repo)(nil), "daemon.Repo")
	proto1.RegisterType((*GitRepo)(nil), "daemon.GitRepo")
	proto1.RegisterType((*CreateServiceReply)(nil), "daemon.CreateServiceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Daemon service

type DaemonClient interface {
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CreateServiceReply, error)
}

type daemonClient struct {
	cc *grpc.ClientConn
}

func NewDaemonClient(cc *grpc.ClientConn) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CreateServiceReply, error) {
	out := new(CreateServiceReply)
	err := grpc.Invoke(ctx, "/daemon.Daemon/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Daemon service

type DaemonServer interface {
	CreateService(context.Context, *Service) (*CreateServiceReply, error)
}

func RegisterDaemonServer(s *grpc.Server, srv DaemonServer) {
	s.RegisterService(&_Daemon_serviceDesc, srv)
}

func _Daemon_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

var _Daemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Daemon_CreateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/daemon.proto",
}

func init() { proto1.RegisterFile("internal/proto/daemon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x5f, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0xbb, 0xee, 0xbf, 0xe6, 0xc6, 0xb4, 0x30, 0xf8, 0x90, 0x56, 0x84, 0x18, 0x28, 0xe6,
	0x41, 0x36, 0xb8, 0x7d, 0x29, 0x08, 0x82, 0x5d, 0xc1, 0xbe, 0x08, 0x65, 0xf4, 0x45, 0x5f, 0xc2,
	0x34, 0xb9, 0x66, 0x87, 0x9d, 0x3f, 0x61, 0x72, 0x5b, 0xbb, 0x5f, 0xce, 0xcf, 0x26, 0x99, 0x64,
	0xd7, 0xd5, 0x3e, 0xcd, 0xdc, 0x73, 0x4e, 0xee, 0x2f, 0xf7, 0x26, 0xf0, 0x52, 0x1a, 0x42, 0x67,
	0x84, 0xca, 0x1b, 0x67, 0xc9, 0xe6, 0x95, 0x40, 0x6d, 0xcd, 0xc2, 0x17, 0x6c, 0xd6, 0x57, 0xe9,
	0xef, 0x11, 0xcc, 0xbf, 0xa2, 0x7b, 0x90, 0x25, 0xb2, 0x33, 0x38, 0xde, 0x5c, 0xb5, 0xc5, 0x56,
	0x68, 0x15, 0x8f, 0x92, 0x51, 0x16, 0xf0, 0xf9, 0xe6, 0xaa, 0xfd, 0x2e, 0xb4, 0x62, 0x6f, 0xe0,
	0xb4, 0xb2, 0xe5, 0x06, 0xdd, 0x4f, 0xa9, 0xb0, 0x20, 0x7c, 0xa4, 0xf8, 0x99, 0x4f, 0x9c, 0xfc,
	0x95, 0xbf, 0xe1, 0x23, 0xb1, 0x0b, 0x98, 0x69, 0x7b, 0x6f, 0xa8, 0x8d, 0xc7, 0xc9, 0x38, 0x0b,
	0x97, 0xd1, 0x62, 0xc0, 0x7e, 0xe9, 0x54, 0x3e, 0x98, 0xec, 0x35, 0x4c, 0x5b, 0xc2, 0xa6, 0x8d,
	0x27, 0x3e, 0x15, 0xee, 0x52, 0x2b, 0x5d, 0xf1, 0xde, 0x61, 0x17, 0x70, 0x72, 0x88, 0x14, 0x75,
	0x3c, 0xf5, 0xc4, 0xe8, 0x80, 0x28, 0xea, 0xf4, 0x0c, 0xc6, 0x2b, 0x5d, 0x31, 0x06, 0x13, 0xe1,
	0xea, 0x87, 0x78, 0x94, 0x8c, 0xb3, 0x80, 0xfb, 0x7b, 0x7a, 0x0b, 0x53, 0x4f, 0x65, 0x09, 0x4c,
	0x1c, 0x36, 0xd6, 0x0f, 0x15, 0x2e, 0x9f, 0xef, 0x60, 0x1c, 0x1b, 0xcb, 0xbd, 0xd3, 0xc1, 0x4a,
	0x6b, 0x48, 0x48, 0x83, 0xae, 0x68, 0x04, 0xad, 0x87, 0xf1, 0xa2, 0xbd, 0x7a, 0x2b, 0x68, 0x9d,
	0x7e, 0x84, 0x49, 0xf7, 0x10, 0x7b, 0x0b, 0xc7, 0xb5, 0xa4, 0xe2, 0xa0, 0xe9, 0xe9, 0xae, 0xe9,
	0x67, 0x49, 0x5d, 0xe4, 0xe6, 0x88, 0xcf, 0xeb, 0xfe, 0x7a, 0x1d, 0x42, 0xd0, 0x25, 0x0b, 0xda,
	0x36, 0x98, 0x66, 0x30, 0x1f, 0x22, 0xec, 0x15, 0x80, 0xb2, 0xa5, 0x50, 0x3d, 0xb0, 0xdf, 0x78,
	0xe0, 0x15, 0x0f, 0x7b, 0x01, 0x6c, 0xe5, 0x50, 0x10, 0x0e, 0xdf, 0x87, 0x63, 0xa3, 0xb6, 0xcb,
	0x1b, 0x98, 0x7d, 0xf2, 0x24, 0xf6, 0x01, 0xa2, 0x7f, 0x7c, 0xb6, 0x7f, 0x87, 0x41, 0x38, 0x3f,
	0xdf, 0xaf, 0xf5, 0x49, 0x9f, 0xf4, 0xe8, 0xfa, 0xf2, 0xc7, 0xbb, 0x5a, 0xd2, 0xfa, 0xfe, 0x6e,
	0x51, 0x5a, 0x9d, 0xff, 0x92, 0xa6, 0xd2, 0x52, 0x29, 0x34, 0x75, 0x4e, 0x52, 0x51, 0xfe, 0xdf,
	0xdf, 0xf3, 0xde, 0x1f, 0x77, 0x33, 0x7f, 0x5c, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x06, 0xc0,
	0x45, 0xbe, 0x5d, 0x02, 0x00, 0x00,
}
